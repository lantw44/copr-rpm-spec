From 994bf9e014e33de7dcd31bd76bbae102e9b8189e Mon Sep 17 00:00:00 2001
From: Ting-Wei Lan <lantw44@gmail.com>
Date: Mon, 14 Jun 2021 01:55:47 +0800
Subject: [PATCH] Revert "status: Do not emit ANSI escapes when stderr is not a
 tty."

This reverts commit d613c1771a1986d3c0f1e034155fde41f32f9b8e.
---
 guix/progress.scm | 68 ++++++++++++++++++++---------------------------
 guix/status.scm   |  4 ---
 2 files changed, 29 insertions(+), 43 deletions(-)

diff --git a/guix/progress.scm b/guix/progress.scm
index 334bd40547..cd80ae620a 100644
--- a/guix/progress.scm
+++ b/guix/progress.scm
@@ -184,54 +184,44 @@ move the cursor to the beginning of the line."
 
 (define* (display-download-progress file size
                                     #:key
-                                    (tty? #t)
                                     start-time (transferred 0)
                                     (log-port (current-error-port)))
   "Write the progress report to LOG-PORT.  Use START-TIME (a SRFI-19 time
 object) and TRANSFERRED (a total number of bytes) to determine the
-throughput.  When TTY? is false, assume LOG-PORT is not a tty and do not emit
-ANSI escape codes."
+throughput."
   (define elapsed
     (duration->seconds
      (time-difference (current-time (time-type start-time))
                       start-time)))
 
-  (cond ((and (not tty?)
-              size (not (zero? size))
-              transferred)
-         ;; Display a dot for at most every 10%.
-         (when (zero? (modulo (round (* 100. (/ transferred size))) 10))
-           (display "." log-port)
-           (force-output log-port)))
-        ((and (number? size) (not (zero? size)))
-         (let* ((%  (* 100.0 (/ transferred size)))
-                (throughput (/ transferred elapsed))
-                (left       (format #f " ~a  ~a" file
-                                    (byte-count->string size)))
-                (right      (format #f "~a/s ~a ~a~6,1f%"
-                                    (byte-count->string throughput)
-                                    (seconds->string elapsed)
-                                    (progress-bar %) %)))
-           (erase-current-line log-port)
-           (display (string-pad-middle left right
-                                       (current-terminal-columns))
-                    log-port)
-           (force-output log-port)))
-        (else
-         ;; If we don't know the total size, the last transfer will have a 0B
-         ;; size.  Don't display it.
-         (unless (zero? transferred)
-           (let* ((throughput (/ transferred elapsed))
-                  (left       (format #f " ~a" file))
-                  (right      (format #f "~a/s ~a | ~a transferred"
-                                      (byte-count->string throughput)
-                                      (seconds->string elapsed)
-                                      (byte-count->string transferred))))
-             (erase-current-line log-port)
-             (display (string-pad-middle left right
-                                         (current-terminal-columns))
-                      log-port)
-             (force-output log-port))))))
+  (if (and (number? size) (not (zero? size)))
+      (let* ((%  (* 100.0 (/ transferred size)))
+             (throughput (/ transferred elapsed))
+             (left       (format #f " ~a  ~a" file
+                                 (byte-count->string size)))
+             (right      (format #f "~a/s ~a ~a~6,1f%"
+                                 (byte-count->string throughput)
+                                 (seconds->string elapsed)
+                                 (progress-bar %) %)))
+        (erase-current-line log-port)
+        (display (string-pad-middle left right
+                                    (current-terminal-columns))
+                 log-port)
+        (force-output log-port))
+      ;; If we don't know the total size, the last transfer will have a 0B
+      ;; size.  Don't display it.
+      (unless (zero? transferred)
+        (let* ((throughput (/ transferred elapsed))
+               (left       (format #f " ~a" file))
+               (right      (format #f "~a/s ~a | ~a transferred"
+                                   (byte-count->string throughput)
+                                   (seconds->string elapsed)
+                                   (byte-count->string transferred))))
+          (erase-current-line log-port)
+          (display (string-pad-middle left right
+                                      (current-terminal-columns))
+                   log-port)
+          (force-output log-port)))))
 
 (define %progress-interval
   ;; Default interval between subsequent outputs for rate-limited displays.
diff --git a/guix/status.scm b/guix/status.scm
index 362ae2882c..d6f4387adf 100644
--- a/guix/status.scm
+++ b/guix/status.scm
@@ -424,9 +424,6 @@ substitutes being downloaded."
         (cute colorize-string <> (color RED BOLD))
         identity))
 
-  (define tty?
-    (isatty?* port))
-
   (define (report-build-progress phase %)
     (let ((% (min (max % 0) 100)))                ;sanitize
       (erase-current-line port)
@@ -547,7 +544,6 @@ substitutes being downloaded."
                          (nar-uri-abbreviation uri)
                          (basename uri))))
             (display-download-progress uri size
-                                       #:tty? tty?
                                        #:start-time
                                        (download-start download)
                                        #:transferred transferred))))))
-- 
2.31.1

