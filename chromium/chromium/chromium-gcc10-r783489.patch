From e8ec5cc524f989d9f4cb2e19f401fa7b958a1751 Mon Sep 17 00:00:00 2001
From: Naomi Musgrave <nmusgrave@chromium.org>
Date: Mon, 29 Jun 2020 12:30:00 +0000
Subject: [PATCH] Split decoder so that necessary methods are in public

Bug: 1084582
Change-Id: Iff455ac6887661f39d60c7bcd7e5ef999179ac91
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2270226
Commit-Queue: Naomi Musgrave <nmusgrave@chromium.org>
Reviewed-by: Alex Chau <alexchau@chromium.org>
Cr-Commit-Position: refs/heads/master@{#783489}
---
 .../services/sharing/nearby_decoder/BUILD.gn  | 10 +-
 .../nearby_decoder/advertisement_decoder.cc   | 94 +++++++++++++++++++
 .../nearby_decoder/advertisement_decoder.h    | 35 +++++++
 ...t.cc => advertisement_decoder_unittest.cc} | 75 +++++----------
 .../sharing/nearby_decoder/nearby_decoder.cc  |  7 +-
 .../nearby_decoder/nearby_decoder_unittest.cc |  4 +-
 chrome/services/sharing/public/cpp/BUILD.gn   | 19 +++-
 .../cpp}/advertisement.cc                     | 74 +--------------
 .../cpp}/advertisement.h                      | 13 +--
 .../public/cpp/advertisement_unittest.cc      | 63 +++++++++++++
 .../{nearby_decoder => public}/proto/BUILD.gn |  0
 .../proto/wire_format.proto                   |  0
 chrome/test/BUILD.gn                          |  1 +
 13 files changed, 251 insertions(+), 144 deletions(-)
 create mode 100644 chrome/services/sharing/nearby_decoder/advertisement_decoder.cc
 create mode 100644 chrome/services/sharing/nearby_decoder/advertisement_decoder.h
 rename chrome/services/sharing/nearby_decoder/{advertisement_unittest.cc => advertisement_decoder_unittest.cc} (60%)
 rename chrome/services/sharing/{nearby_decoder => public/cpp}/advertisement.cc (59%)
 rename chrome/services/sharing/{nearby_decoder => public/cpp}/advertisement.h (83%)
 create mode 100644 chrome/services/sharing/public/cpp/advertisement_unittest.cc
 rename chrome/services/sharing/{nearby_decoder => public}/proto/BUILD.gn (100%)
 rename chrome/services/sharing/{nearby_decoder => public}/proto/wire_format.proto (100%)

diff --git a/chrome/services/sharing/nearby_decoder/BUILD.gn b/chrome/services/sharing/nearby_decoder/BUILD.gn
index 6b7666f303d0..0dfe998736e9 100644
--- a/chrome/services/sharing/nearby_decoder/BUILD.gn
+++ b/chrome/services/sharing/nearby_decoder/BUILD.gn
@@ -6,17 +6,17 @@ import("//testing/libfuzzer/fuzzer_test.gni")
 
 source_set("nearby_decoder") {
   sources = [
-    "advertisement.cc",
-    "advertisement.h",
+    "advertisement_decoder.cc",
+    "advertisement_decoder.h",
     "nearby_decoder.cc",
     "nearby_decoder.h",
   ]
 
-  deps = [ "//chrome/services/sharing/nearby_decoder/proto" ]
-
   public_deps = [
     "//base",
+    "//chrome/services/sharing/public/cpp",
     "//chrome/services/sharing/public/mojom",
+    "//chrome/services/sharing/public/proto",
     "//mojo/public/cpp/bindings",
   ]
 }
@@ -25,7 +25,7 @@ source_set("unit_tests") {
   testonly = true
 
   sources = [
-    "advertisement_unittest.cc",
+    "advertisement_decoder_unittest.cc",
     "nearby_decoder_unittest.cc",
   ]
 
diff --git a/chrome/services/sharing/nearby_decoder/advertisement_decoder.cc b/chrome/services/sharing/nearby_decoder/advertisement_decoder.cc
new file mode 100644
index 000000000000..68173b240964
--- /dev/null
+++ b/chrome/services/sharing/nearby_decoder/advertisement_decoder.cc
@@ -0,0 +1,94 @@
+// Copyright 2020 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include <utility>
+
+#include "chrome/services/sharing/nearby_decoder/advertisement_decoder.h"
+
+#include "base/logging.h"
+#include "base/memory/ptr_util.h"
+#include "base/strings/string_util.h"
+
+namespace {
+
+// The bit mask for parsing and writing Version.
+constexpr uint8_t kVersionBitmask = 0b111;
+
+// The bit mask for parsing and writing Visibility.
+constexpr uint8_t kVisibilityBitmask = 0b1;
+
+constexpr uint8_t kMinimumSize =
+    /* Version(3 bits)|Visibility(1 bit)|Reserved(4 bits)= */ 1 +
+    sharing::Advertisement::kSaltSize +
+    sharing::Advertisement::kMetadataEncryptionKeyHashByteSize;
+
+int ParseVersion(uint8_t b) {
+  return (b >> 5) & kVersionBitmask;
+}
+
+bool ParseHasDeviceName(uint8_t b) {
+  return ((b >> 4) & kVisibilityBitmask) == 0;
+}
+
+}  // namespace
+
+namespace sharing {
+
+// static
+std::unique_ptr<sharing::Advertisement> AdvertisementDecoder::FromEndpointInfo(
+    base::span<const uint8_t> endpoint_info) {
+  if (endpoint_info.size() < kMinimumSize) {
+    LOG(ERROR) << "Failed to parse advertisement because it was too short.";
+    return nullptr;
+  }
+
+  auto iter = endpoint_info.begin();
+  uint8_t first_byte = *iter++;
+
+  int version = ParseVersion(first_byte);
+  if (version != 0) {
+    LOG(ERROR) << "Failed to parse advertisement because we failed to parse "
+                  "the version number";
+    return nullptr;
+  }
+
+  bool has_device_name = ParseHasDeviceName(first_byte);
+
+  std::vector<uint8_t> salt(iter, iter + sharing::Advertisement::kSaltSize);
+  iter += sharing::Advertisement::kSaltSize;
+
+  std::vector<uint8_t> encrypted_metadata_key(
+      iter, iter + sharing::Advertisement::kMetadataEncryptionKeyHashByteSize);
+  iter += sharing::Advertisement::kMetadataEncryptionKeyHashByteSize;
+
+  int device_name_length = 0;
+  if (iter != endpoint_info.end())
+    device_name_length = *iter++ & 0xff;
+
+  if (endpoint_info.end() - iter < device_name_length ||
+      (device_name_length == 0 && has_device_name)) {
+    LOG(ERROR) << "Failed to parse advertisement because the device name did "
+                  "not match the expected length "
+               << device_name_length;
+    return nullptr;
+  }
+
+  base::Optional<std::string> optional_device_name;
+  if (device_name_length > 0) {
+    optional_device_name = std::string(iter, iter + device_name_length);
+    iter += device_name_length;
+
+    if (!base::IsStringUTF8(*optional_device_name)) {
+      LOG(ERROR) << "Failed to parse advertisement because the device name was "
+                    "corrupted";
+      return nullptr;
+    }
+  }
+
+  return sharing::Advertisement::NewInstance(std::move(salt),
+                                             std::move(encrypted_metadata_key),
+                                             std::move(optional_device_name));
+}
+
+}  // namespace sharing
diff --git a/chrome/services/sharing/nearby_decoder/advertisement_decoder.h b/chrome/services/sharing/nearby_decoder/advertisement_decoder.h
new file mode 100644
index 000000000000..3a916ab7de5f
--- /dev/null
+++ b/chrome/services/sharing/nearby_decoder/advertisement_decoder.h
@@ -0,0 +1,35 @@
+// Copyright 2020 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_SERVICES_SHARING_NEARBY_DECODER_ADVERTISEMENT_DECODER_H_
+#define CHROME_SERVICES_SHARING_NEARBY_DECODER_ADVERTISEMENT_DECODER_H_
+
+#include <stdint.h>
+#include <memory>
+#include <string>
+#include <vector>
+
+#include "base/containers/span.h"
+#include "base/optional.h"
+#include "chrome/services/sharing/public/cpp/advertisement.h"
+
+namespace sharing {
+
+// A utility class to convert from a byte span in the form of
+// [VERSION|VISIBILITY][SALT][ACCOUNT_IDENTIFIER][LEN][DEVICE_NAME],
+// to an Advertisement.
+// A device name indicates the advertisement is visible to everyone;
+// a missing device name indicates the advertisement is contacts-only.
+class AdvertisementDecoder {
+ public:
+  AdvertisementDecoder() = delete;
+  ~AdvertisementDecoder() = delete;
+
+  static std::unique_ptr<sharing::Advertisement> FromEndpointInfo(
+      base::span<const uint8_t> endpoint_info);
+};
+
+}  // namespace sharing
+
+#endif  //  CHROME_SERVICES_SHARING_NEARBY_DECODER_ADVERTISEMENT_DECODER_H_
diff --git a/chrome/services/sharing/nearby_decoder/advertisement_unittest.cc b/chrome/services/sharing/nearby_decoder/advertisement_decoder_unittest.cc
similarity index 60%
rename from chrome/services/sharing/nearby_decoder/advertisement_unittest.cc
rename to chrome/services/sharing/nearby_decoder/advertisement_decoder_unittest.cc
index e618b66d0fa6..bfc1dd33e4cf 100644
--- a/chrome/services/sharing/nearby_decoder/advertisement_unittest.cc
+++ b/chrome/services/sharing/nearby_decoder/advertisement_decoder_unittest.cc
@@ -7,11 +7,11 @@
 #include <string>
 #include <vector>
 
-#include "chrome/services/sharing/nearby_decoder/advertisement.h"
-#include "chrome/services/sharing/nearby_decoder/nearby_decoder.h"
+#include "chrome/services/sharing/nearby_decoder/advertisement_decoder.h"
 
 #include "base/strings/strcat.h"
 #include "base/test/task_environment.h"
+#include "chrome/services/sharing/public/cpp/advertisement.h"
 #include "mojo/public/cpp/bindings/remote.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
@@ -37,123 +37,94 @@ void ExpectEquals(const Advertisement& self, const Advertisement& other) {
 
 }  // namespace
 
-TEST(AdvertisementTest, CreateNewInstanceWithNullName) {
-  std::unique_ptr<sharing::Advertisement> advertisement =
-      sharing::Advertisement::NewInstance(kSalt, kEncryptedMetadataKey,
-                                          /* device_name=*/base::nullopt);
-  EXPECT_FALSE(advertisement->device_name());
-  EXPECT_EQ(advertisement->encrypted_metadata_key(), kEncryptedMetadataKey);
-  EXPECT_FALSE(advertisement->HasDeviceName());
-  EXPECT_EQ(advertisement->salt(), kSalt);
-}
-
-TEST(AdvertisementTest, CreateNewInstance) {
-  std::unique_ptr<sharing::Advertisement> advertisement =
-      sharing::Advertisement::NewInstance(kSalt, kEncryptedMetadataKey,
-                                          kDeviceName);
-  EXPECT_EQ(advertisement->device_name(), kDeviceName);
-  EXPECT_EQ(advertisement->encrypted_metadata_key(), kEncryptedMetadataKey);
-  EXPECT_TRUE(advertisement->HasDeviceName());
-  EXPECT_EQ(advertisement->salt(), kSalt);
-}
-
-TEST(AdvertisementTest, CreateNewInstanceFromEndpointInfo) {
+TEST(AdvertisementDecoderTest, CreateNewInstanceFromEndpointInfo) {
   std::unique_ptr<sharing::Advertisement> original =
       sharing::Advertisement::NewInstance(kSalt, kEncryptedMetadataKey,
                                           kDeviceName);
   std::unique_ptr<sharing::Advertisement> advertisement =
-      sharing::Advertisement::FromEndpointInfo(original->ToEndpointInfo());
+      sharing::AdvertisementDecoder::FromEndpointInfo(
+          original->ToEndpointInfo());
   ExpectEquals(*advertisement, *original);
 }
 
-TEST(AdvertisementTest, CreateNewInstanceFromStringWithExtraLength) {
+TEST(AdvertisementDecoderTest, CreateNewInstanceFromStringWithExtraLength) {
   std::unique_ptr<sharing::Advertisement> original =
       sharing::Advertisement::NewInstance(
           kSalt, kEncryptedMetadataKey, base::StrCat({kDeviceName, "123456"}));
   std::unique_ptr<sharing::Advertisement> advertisement =
-      sharing::Advertisement::FromEndpointInfo(original->ToEndpointInfo());
+      sharing::AdvertisementDecoder::FromEndpointInfo(
+          original->ToEndpointInfo());
   ExpectEquals(*advertisement, *original);
 }
 
-TEST(AdvertisementTest, CreateNewInstanceWithWrongSaltSize) {
-  EXPECT_FALSE(sharing::Advertisement::NewInstance(
-      /* salt= */ std::vector<uint8_t>(5, 5), kEncryptedMetadataKey,
-      kDeviceName));
-}
-
-TEST(AdvertisementTest, CreateNewInstanceWithWrongAccountIdentifierSize) {
-  EXPECT_FALSE(sharing::Advertisement::NewInstance(
-      kSalt, /* encrypted_metadata_key= */ std::vector<uint8_t>(2, 1),
-      kDeviceName));
-}
-
-TEST(AdvertisementTest, SerializeContactsOnlyAdvertisementWithoutDeviceName) {
+TEST(AdvertisementDecoderTest,
+     SerializeContactsOnlyAdvertisementWithoutDeviceName) {
   std::unique_ptr<sharing::Advertisement> advertisement =
       sharing::Advertisement::NewInstance(kSalt, kEncryptedMetadataKey,
                                           /* device_name= */ base::nullopt);
-  ExpectEquals(*sharing::Advertisement::FromEndpointInfo(
+  ExpectEquals(*sharing::AdvertisementDecoder::FromEndpointInfo(
                    advertisement->ToEndpointInfo()),
                *advertisement);
 }
 
-TEST(AdvertisementTest,
+TEST(AdvertisementDecoderTest,
      SerializeVisibleToEveryoneAdvertisementWithoutDeviceName) {
   std::unique_ptr<sharing::Advertisement> advertisement =
       sharing::Advertisement::NewInstance(kSalt, kEncryptedMetadataKey,
                                           /* device_name= */ std::string());
-  EXPECT_FALSE(sharing::Advertisement::FromEndpointInfo(
+  EXPECT_FALSE(sharing::AdvertisementDecoder::FromEndpointInfo(
       advertisement->ToEndpointInfo()));
 }
 
-TEST(AdvertisementTest, V1ContactsOnlyAdvertisementDecoding) {
+TEST(AdvertisementDecoderTest, V1ContactsOnlyAdvertisementDecoding) {
   std::unique_ptr<sharing::Advertisement> advertisement =
       sharing::Advertisement::NewInstance(kSalt, kEncryptedMetadataKey,
                                           kDeviceName);
   std::vector<uint8_t> v1EndpointInfo = {
       16, 0, 0, 0,  0,   0,   0,   0,   0,  0,   0,  0,  0,   0,
       0,  0, 0, 10, 100, 101, 118, 105, 99, 101, 78, 97, 109, 101};
-  ExpectEquals(*sharing::Advertisement::FromEndpointInfo(v1EndpointInfo),
+  ExpectEquals(*sharing::AdvertisementDecoder::FromEndpointInfo(v1EndpointInfo),
                *advertisement);
 }
 
-TEST(AdvertisementTest, V1VisibleToEveryoneAdvertisementDecoding) {
+TEST(AdvertisementDecoderTest, V1VisibleToEveryoneAdvertisementDecoding) {
   std::unique_ptr<sharing::Advertisement> advertisement =
       sharing::Advertisement::NewInstance(kSalt, kEncryptedMetadataKey,
                                           kDeviceName);
   std::vector<uint8_t> v1EndpointInfo = {
       0, 0, 0, 0,  0,   0,   0,   0,   0,  0,   0,  0,  0,   0,
       0, 0, 0, 10, 100, 101, 118, 105, 99, 101, 78, 97, 109, 101};
-  ExpectEquals(*sharing::Advertisement::FromEndpointInfo(v1EndpointInfo),
+  ExpectEquals(*sharing::AdvertisementDecoder::FromEndpointInfo(v1EndpointInfo),
                *advertisement);
 }
 
-TEST(AdvertisementTest, V1ContactsOnlyAdvertisementEncoding) {
+TEST(AdvertisementDecoderTest, V1ContactsOnlyAdvertisementEncoding) {
   std::unique_ptr<sharing::Advertisement> advertisement =
       sharing::Advertisement::NewInstance(kSalt, kEncryptedMetadataKey,
                                           /* device_name= */ base::nullopt);
   std::vector<uint8_t> v1EndpointInfo = {16, 0, 0, 0, 0, 0, 0, 0, 0,
                                          0,  0, 0, 0, 0, 0, 0, 0};
-  ExpectEquals(*sharing::Advertisement::FromEndpointInfo(v1EndpointInfo),
+  ExpectEquals(*sharing::AdvertisementDecoder::FromEndpointInfo(v1EndpointInfo),
                *advertisement);
 }
 
-TEST(AdvertisementTest, V1VisibleToEveryoneAdvertisementEncoding) {
+TEST(AdvertisementDecoderTest, V1VisibleToEveryoneAdvertisementEncoding) {
   std::unique_ptr<sharing::Advertisement> advertisement =
       sharing::Advertisement::NewInstance(kSalt, kEncryptedMetadataKey,
                                           kDeviceName);
   std::vector<uint8_t> v1EndpointInfo = {
       0, 0, 0, 0,  0,   0,   0,   0,   0,  0,   0,  0,  0,   0,
       0, 0, 0, 10, 100, 101, 118, 105, 99, 101, 78, 97, 109, 101};
-  ExpectEquals(*sharing::Advertisement::FromEndpointInfo(v1EndpointInfo),
+  ExpectEquals(*sharing::AdvertisementDecoder::FromEndpointInfo(v1EndpointInfo),
                *advertisement);
 }
 
-TEST(AdvertisementTest, InvalidDeviceNameEncoding) {
+TEST(AdvertisementDecoderTest, InvalidDeviceNameEncoding) {
   std::vector<uint8_t> v1EndpointInfo = {
       0, 0, 0, 0,  0,   0,  0,   0,   0,  0,   0,  0,  0,   0,
       0, 0, 0, 10, 226, 40, 161, 105, 99, 101, 78, 97, 109, 101,
   };
-  EXPECT_FALSE(sharing::Advertisement::FromEndpointInfo(v1EndpointInfo));
+  EXPECT_FALSE(sharing::AdvertisementDecoder::FromEndpointInfo(v1EndpointInfo));
 }
 
 }  // namespace sharing
diff --git a/chrome/services/sharing/nearby_decoder/nearby_decoder.cc b/chrome/services/sharing/nearby_decoder/nearby_decoder.cc
index 814f972c6262..907c0ee2cb90 100644
--- a/chrome/services/sharing/nearby_decoder/nearby_decoder.cc
+++ b/chrome/services/sharing/nearby_decoder/nearby_decoder.cc
@@ -10,9 +10,10 @@
 
 #include "base/callback.h"
 #include "base/optional.h"
-#include "chrome/services/sharing/nearby_decoder/advertisement.h"
-#include "chrome/services/sharing/nearby_decoder/proto/wire_format.pb.h"
+#include "chrome/services/sharing/nearby_decoder/advertisement_decoder.h"
+#include "chrome/services/sharing/public/cpp/advertisement.h"
 #include "chrome/services/sharing/public/mojom/nearby_decoder_types.mojom.h"
+#include "chrome/services/sharing/public/proto/wire_format.pb.h"
 
 namespace sharing {
 
@@ -217,7 +218,7 @@ void NearbySharingDecoder::DecodeAdvertisement(
     const std::vector<uint8_t>& data,
     DecodeAdvertisementCallback callback) {
   std::unique_ptr<sharing::Advertisement> advertisement =
-      sharing::Advertisement::FromEndpointInfo(data);
+      sharing::AdvertisementDecoder::FromEndpointInfo(data);
 
   if (!advertisement) {
     LOG(ERROR) << "Failed to decode advertisement";
diff --git a/chrome/services/sharing/nearby_decoder/nearby_decoder_unittest.cc b/chrome/services/sharing/nearby_decoder/nearby_decoder_unittest.cc
index fa9868b16055..bfdab13c9a83 100644
--- a/chrome/services/sharing/nearby_decoder/nearby_decoder_unittest.cc
+++ b/chrome/services/sharing/nearby_decoder/nearby_decoder_unittest.cc
@@ -13,9 +13,9 @@
 #include "base/strings/string_number_conversions.h"
 #include "base/test/bind_test_util.h"
 #include "base/test/task_environment.h"
-#include "chrome/services/sharing/nearby_decoder/advertisement.h"
-#include "chrome/services/sharing/nearby_decoder/proto/wire_format.pb.h"
+#include "chrome/services/sharing/public/cpp/advertisement.h"
 #include "chrome/services/sharing/public/mojom/nearby_decoder_types.mojom.h"
+#include "chrome/services/sharing/public/proto/wire_format.pb.h"
 #include "mojo/public/cpp/bindings/remote.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
diff --git a/chrome/services/sharing/public/cpp/BUILD.gn b/chrome/services/sharing/public/cpp/BUILD.gn
index ee1f7813882c..85ad274ac4a6 100644
--- a/chrome/services/sharing/public/cpp/BUILD.gn
+++ b/chrome/services/sharing/public/cpp/BUILD.gn
@@ -4,9 +4,26 @@
 
 source_set("cpp") {
   sources = [
+    "advertisement.cc",
+    "advertisement.h",
     "sharing_webrtc_metrics.cc",
     "sharing_webrtc_metrics.h",
   ]
 
-  public_deps = [ "//base" ]
+  public_deps = [
+    "//base",
+    "//mojo/public/cpp/bindings",
+  ]
+}
+
+source_set("unit_tests") {
+  testonly = true
+
+  sources = [ "advertisement_unittest.cc" ]
+
+  deps = [
+    "//base/test:test_support",
+    "//testing/gmock",
+    "//testing/gtest",
+  ]
 }
diff --git a/chrome/services/sharing/nearby_decoder/advertisement.cc b/chrome/services/sharing/public/cpp/advertisement.cc
similarity index 59%
rename from chrome/services/sharing/nearby_decoder/advertisement.cc
rename to chrome/services/sharing/public/cpp/advertisement.cc
index 319ff8533a6f..12f0b8ad5c71 100644
--- a/chrome/services/sharing/nearby_decoder/advertisement.cc
+++ b/chrome/services/sharing/public/cpp/advertisement.cc
@@ -4,7 +4,7 @@
 
 #include <utility>
 
-#include "chrome/services/sharing/nearby_decoder/advertisement.h"
+#include "chrome/services/sharing/public/cpp/advertisement.h"
 
 #include "base/logging.h"
 #include "base/memory/ptr_util.h"
@@ -15,26 +15,15 @@ namespace {
 // The bit mask for parsing and writing Version.
 constexpr uint8_t kVersionBitmask = 0b111;
 
-// The bit mask for parsing and writing Visibility.
-constexpr uint8_t kVisibilityBitmask = 0b1;
-
 const uint8_t kMinimumSize =
     /* Version(3 bits)|Visibility(1 bit)|Reserved(4 bits)= */ 1 +
     sharing::Advertisement::kSaltSize +
     sharing::Advertisement::kMetadataEncryptionKeyHashByteSize;
 
-int ParseVersion(uint8_t b) {
-  return (b >> 5) & kVersionBitmask;
-}
-
 uint8_t ConvertVersion(int version) {
   return static_cast<uint8_t>((version & kVersionBitmask) << 5);
 }
 
-bool ParseHasDeviceName(uint8_t b) {
-  return ((b >> 4) & kVisibilityBitmask) == 0;
-}
-
 uint8_t ConvertHasDeviceName(bool hasDeviceName) {
   return static_cast<uint8_t>((hasDeviceName ? 0 : 1) << 4);
 }
@@ -43,10 +32,6 @@ uint8_t ConvertHasDeviceName(bool hasDeviceName) {
 
 namespace sharing {
 
-// static
-constexpr uint8_t Advertisement::kSaltSize = 2;
-constexpr uint8_t Advertisement::kMetadataEncryptionKeyHashByteSize = 14;
-
 // static
 std::unique_ptr<Advertisement> Advertisement::NewInstance(
     std::vector<uint8_t> salt,
@@ -81,63 +66,6 @@ std::unique_ptr<Advertisement> Advertisement::NewInstance(
       std::move(device_name)));
 }
 
-// static
-std::unique_ptr<Advertisement> Advertisement::FromEndpointInfo(
-    base::span<const uint8_t> endpoint_info) {
-  if (endpoint_info.size() < kMinimumSize) {
-    LOG(ERROR) << "Failed to parse advertisement because it was too short.";
-    return nullptr;
-  }
-
-  auto iter = endpoint_info.begin();
-  uint8_t first_byte = *iter++;
-
-  int version = ParseVersion(first_byte);
-  if (version != 0) {
-    LOG(ERROR) << "Failed to parse advertisement because we failed to parse "
-                  "the version number";
-    return nullptr;
-  }
-
-  bool has_device_name = ParseHasDeviceName(first_byte);
-
-  std::vector<uint8_t> salt(iter, iter + kSaltSize);
-  iter += kSaltSize;
-
-  std::vector<uint8_t> encrypted_metadata_key(
-      iter, iter + kMetadataEncryptionKeyHashByteSize);
-  iter += kMetadataEncryptionKeyHashByteSize;
-
-  int device_name_length = 0;
-  if (iter != endpoint_info.end())
-    device_name_length = *iter++ & 0xff;
-
-  if (endpoint_info.end() - iter < device_name_length ||
-      (device_name_length == 0 && has_device_name)) {
-    LOG(ERROR) << "Failed to parse advertisement because the device name did "
-                  "not match the expected length "
-               << device_name_length;
-    return nullptr;
-  }
-
-  base::Optional<std::string> optional_device_name;
-  if (device_name_length > 0) {
-    optional_device_name = std::string(iter, iter + device_name_length);
-    iter += device_name_length;
-
-    if (!base::IsStringUTF8(*optional_device_name)) {
-      LOG(ERROR) << "Failed to parse advertisement because the device name was "
-                    "corrupted";
-      return nullptr;
-    }
-  }
-
-  // Using `new` to access a non-public constructor.
-  return base::WrapUnique(new Advertisement(version, std::move(salt),
-                                            std::move(encrypted_metadata_key),
-                                            std::move(optional_device_name)));
-}
-
 Advertisement::~Advertisement() = default;
 Advertisement::Advertisement(Advertisement&& other) = default;
 
diff --git a/chrome/services/sharing/nearby_decoder/advertisement.h b/chrome/services/sharing/public/cpp/advertisement.h
similarity index 83%
rename from chrome/services/sharing/nearby_decoder/advertisement.h
rename to chrome/services/sharing/public/cpp/advertisement.h
index a5b5742854e5..661d0a0fde66 100644
--- a/chrome/services/sharing/nearby_decoder/advertisement.h
+++ b/chrome/services/sharing/public/cpp/advertisement.h
@@ -2,8 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
-#ifndef CHROME_SERVICES_SHARING_NEARBY_DECODER_ADVERTISEMENT_H_
-#define CHROME_SERVICES_SHARING_NEARBY_DECODER_ADVERTISEMENT_H_
+#ifndef CHROME_SERVICES_SHARING_PUBLIC_CPP_ADVERTISEMENT_H_
+#define CHROME_SERVICES_SHARING_PUBLIC_CPP_ADVERTISEMENT_H_
 
 #include <stdint.h>
 #include <memory>
@@ -26,9 +26,6 @@ class Advertisement {
       std::vector<uint8_t> encrypted_metadata_key,
       base::Optional<std::string> device_name);
 
-  static std::unique_ptr<Advertisement> FromEndpointInfo(
-      base::span<const uint8_t> endpoint_info);
-
   Advertisement(Advertisement&& other);
   Advertisement(const Advertisement& other) = delete;
   Advertisement& operator=(const Advertisement& rhs) = delete;
@@ -46,8 +43,8 @@ class Advertisement {
   }
   bool HasDeviceName() const { return device_name_.has_value(); }
 
-  static const uint8_t kSaltSize;
-  static const uint8_t kMetadataEncryptionKeyHashByteSize;
+  static const uint8_t kSaltSize = 2;
+  static const uint8_t kMetadataEncryptionKeyHashByteSize = 14;
 
  private:
   Advertisement(int version,
@@ -72,4 +69,4 @@ class Advertisement {
 
 }  // namespace sharing
 
-#endif  //  CHROME_SERVICES_SHARING_NEARBY_DECODER_ADVERTISEMENT_H_
+#endif  //  CHROME_SERVICES_SHARING_PUBLIC_CPP_ADVERTISEMENT_H_
diff --git a/chrome/services/sharing/public/cpp/advertisement_unittest.cc b/chrome/services/sharing/public/cpp/advertisement_unittest.cc
new file mode 100644
index 000000000000..92230b384fba
--- /dev/null
+++ b/chrome/services/sharing/public/cpp/advertisement_unittest.cc
@@ -0,0 +1,63 @@
+// Copyright 2020 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include <stdint.h>
+#include <memory>
+#include <string>
+#include <vector>
+
+#include "chrome/services/sharing/public/cpp/advertisement.h"
+
+#include "base/strings/strcat.h"
+#include "base/test/task_environment.h"
+#include "mojo/public/cpp/bindings/remote.h"
+#include "testing/gtest/include/gtest/gtest.h"
+
+namespace sharing {
+
+namespace {
+
+const char kDeviceName[] = "deviceName";
+// Salt for advertisement.
+const std::vector<uint8_t> kSalt(Advertisement::kSaltSize, 0);
+// Key for encrypting personal info metadata.
+static const std::vector<uint8_t> kEncryptedMetadataKey(
+    Advertisement::kMetadataEncryptionKeyHashByteSize,
+    0);
+
+}  // namespace
+
+TEST(AdvertisementTest, CreateNewInstanceWithNullName) {
+  std::unique_ptr<sharing::Advertisement> advertisement =
+      sharing::Advertisement::NewInstance(kSalt, kEncryptedMetadataKey,
+                                          /* device_name=*/base::nullopt);
+  EXPECT_FALSE(advertisement->device_name());
+  EXPECT_EQ(advertisement->encrypted_metadata_key(), kEncryptedMetadataKey);
+  EXPECT_FALSE(advertisement->HasDeviceName());
+  EXPECT_EQ(advertisement->salt(), kSalt);
+}
+
+TEST(AdvertisementTest, CreateNewInstance) {
+  std::unique_ptr<sharing::Advertisement> advertisement =
+      sharing::Advertisement::NewInstance(kSalt, kEncryptedMetadataKey,
+                                          kDeviceName);
+  EXPECT_EQ(advertisement->device_name(), kDeviceName);
+  EXPECT_EQ(advertisement->encrypted_metadata_key(), kEncryptedMetadataKey);
+  EXPECT_TRUE(advertisement->HasDeviceName());
+  EXPECT_EQ(advertisement->salt(), kSalt);
+}
+
+TEST(AdvertisementTest, CreateNewInstanceWithWrongSaltSize) {
+  EXPECT_FALSE(sharing::Advertisement::NewInstance(
+      /* salt= */ std::vector<uint8_t>(5, 5), kEncryptedMetadataKey,
+      kDeviceName));
+}
+
+TEST(AdvertisementTest, CreateNewInstanceWithWrongAccountIdentifierSize) {
+  EXPECT_FALSE(sharing::Advertisement::NewInstance(
+      kSalt, /* encrypted_metadata_key= */ std::vector<uint8_t>(2, 1),
+      kDeviceName));
+}
+
+}  // namespace sharing
diff --git a/chrome/services/sharing/nearby_decoder/proto/BUILD.gn b/chrome/services/sharing/public/proto/BUILD.gn
similarity index 100%
rename from chrome/services/sharing/nearby_decoder/proto/BUILD.gn
rename to chrome/services/sharing/public/proto/BUILD.gn
diff --git a/chrome/services/sharing/nearby_decoder/proto/wire_format.proto b/chrome/services/sharing/public/proto/wire_format.proto
similarity index 100%
rename from chrome/services/sharing/nearby_decoder/proto/wire_format.proto
rename to chrome/services/sharing/public/proto/wire_format.proto
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index 6b357abea22a..e970d5d90f0a 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -4336,6 +4336,7 @@ test("unit_tests") {
       "//chrome/browser/resource_coordinator/tab_ranker:tab_features_test_helper",
       "//chrome/services/sharing:unit_tests",
       "//chrome/services/sharing/nearby_decoder:unit_tests",
+      "//chrome/services/sharing/public/cpp:unit_tests",
       "//chrome/services/speech:unit_tests",
       "//components/chrome_cleaner/test:test_name_helper",
       "//components/feature_engagement/test:test_support",
-- 
2.26.2

