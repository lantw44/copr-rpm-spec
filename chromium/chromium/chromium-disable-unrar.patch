diff --git a/chrome/browser/safe_browsing/download_protection/check_client_download_request.h b/chrome/browser/safe_browsing/download_protection/check_client_download_request.h
index 557124968ac2..625830599b5e 100644
--- a/chrome/browser/safe_browsing/download_protection/check_client_download_request.h
+++ b/chrome/browser/safe_browsing/download_protection/check_client_download_request.h
@@ -22,7 +22,6 @@
 #include "chrome/browser/safe_browsing/safe_browsing_navigation_observer_manager.h"
 #include "chrome/browser/safe_browsing/ui_manager.h"
 #include "chrome/common/safe_browsing/binary_feature_extractor.h"
-#include "chrome/services/file_util/public/cpp/sandboxed_rar_analyzer.h"
 #include "chrome/services/file_util/public/cpp/sandboxed_zip_analyzer.h"
 #include "components/download/public/common/download_item.h"
 #include "components/history/core/browser/history_service.h"
diff --git a/chrome/browser/safe_browsing/download_protection/file_analyzer.cc b/chrome/browser/safe_browsing/download_protection/file_analyzer.cc
index 4d4756b45221..43bacd5e5742 100644
--- a/chrome/browser/safe_browsing/download_protection/file_analyzer.cc
+++ b/chrome/browser/safe_browsing/download_protection/file_analyzer.cc
@@ -100,8 +100,6 @@ void FileAnalyzer::Start(const base::FilePath& target_path,
 
   if (inspection_type == DownloadFileType::ZIP) {
     StartExtractZipFeatures();
-  } else if (inspection_type == DownloadFileType::RAR) {
-    StartExtractRarFeatures();
 #if defined(OS_MACOSX)
   } else if (inspection_type == DownloadFileType::DMG) {
     StartExtractDmgFeatures();
@@ -214,6 +212,7 @@ void FileAnalyzer::OnZipAnalysisFinished(
   std::move(callback_).Run(std::move(results_));
 }
 
+#if 0
 void FileAnalyzer::StartExtractRarFeatures() {
   DCHECK_CURRENTLY_ON(BrowserThread::UI);
 
@@ -273,6 +272,7 @@ void FileAnalyzer::OnRarAnalysisFinished(
 
   std::move(callback_).Run(std::move(results_));
 }
+#endif
 
 #if defined(OS_MACOSX)
 // This is called for .DMGs and other files that can be parsed by
diff --git a/chrome/browser/safe_browsing/download_protection/file_analyzer.h b/chrome/browser/safe_browsing/download_protection/file_analyzer.h
index 99684ffae04a..60ae52f70565 100644
--- a/chrome/browser/safe_browsing/download_protection/file_analyzer.h
+++ b/chrome/browser/safe_browsing/download_protection/file_analyzer.h
@@ -11,7 +11,6 @@
 #include "base/memory/weak_ptr.h"
 #include "build/build_config.h"
 #include "chrome/common/safe_browsing/binary_feature_extractor.h"
-#include "chrome/services/file_util/public/cpp/sandboxed_rar_analyzer.h"
 #include "chrome/services/file_util/public/cpp/sandboxed_zip_analyzer.h"
 #include "components/safe_browsing/proto/csd.pb.h"
 #include "third_party/protobuf/src/google/protobuf/repeated_field.h"
@@ -94,9 +93,6 @@ class FileAnalyzer {
   void StartExtractZipFeatures();
   void OnZipAnalysisFinished(const ArchiveAnalyzerResults& archive_results);
 
-  void StartExtractRarFeatures();
-  void OnRarAnalysisFinished(const ArchiveAnalyzerResults& archive_results);
-
 #if defined(OS_MACOSX)
   void StartExtractDmgFeatures();
   void ExtractFileOrDmgFeatures(bool download_file_has_koly_signature);
@@ -113,9 +109,6 @@ class FileAnalyzer {
   scoped_refptr<SandboxedZipAnalyzer> zip_analyzer_;
   base::TimeTicks zip_analysis_start_time_;
 
-  scoped_refptr<SandboxedRarAnalyzer> rar_analyzer_;
-  base::TimeTicks rar_analysis_start_time_;
-
 #if defined(OS_MACOSX)
   scoped_refptr<SandboxedDMGAnalyzer> dmg_analyzer_;
   base::TimeTicks dmg_analysis_start_time_;
diff --git a/chrome/common/safe_browsing/BUILD.gn b/chrome/common/safe_browsing/BUILD.gn
index d96e5f17cb6f..a00dbd53cfdd 100644
--- a/chrome/common/safe_browsing/BUILD.gn
+++ b/chrome/common/safe_browsing/BUILD.gn
@@ -77,7 +77,6 @@ if (safe_browsing_mode == 1) {
       "//base",
       "//base:i18n",
       "//components/safe_browsing:features",
-      "//third_party/unrar:unrar",
     ]
 
     defines = [
@@ -167,7 +166,6 @@ source_set("safe_browsing") {
       ":archive_analyzer_results",
       ":binary_feature_extractor",
       ":download_type_util",
-      ":rar_analyzer",
       "//components/safe_browsing:features",
     ]
 
diff --git a/chrome/common/safe_browsing/DEPS b/chrome/common/safe_browsing/DEPS
index c191816456b0..49076ee372c0 100644
--- a/chrome/common/safe_browsing/DEPS
+++ b/chrome/common/safe_browsing/DEPS
@@ -1,6 +1,5 @@
 include_rules = [
   "+components/safe_browsing",
   "+third_party/protobuf",
-  "+third_party/unrar",
   "+third_party/zlib",
 ]
diff --git a/chrome/common/safe_browsing/rar_analyzer.cc b/chrome/common/safe_browsing/rar_analyzer.cc
index a9161d4acf61..14ec282a7579 100644
--- a/chrome/common/safe_browsing/rar_analyzer.cc
+++ b/chrome/common/safe_browsing/rar_analyzer.cc
@@ -15,7 +15,6 @@
 #include "chrome/common/safe_browsing/download_type_util.h"
 #include "chrome/common/safe_browsing/file_type_policies.h"
 #include "components/safe_browsing/features.h"
-#include "third_party/unrar/src/unrar_wrapper.h"
 
 namespace safe_browsing {
 namespace rar_analyzer {
diff --git a/chrome/services/file_util/public/cpp/BUILD.gn b/chrome/services/file_util/public/cpp/BUILD.gn
index 351a5e2e90b3..213f49de1ee9 100644
--- a/chrome/services/file_util/public/cpp/BUILD.gn
+++ b/chrome/services/file_util/public/cpp/BUILD.gn
@@ -14,8 +14,6 @@ source_set("cpp") {
     sources = [
       "sandboxed_dmg_analyzer_mac.cc",
       "sandboxed_dmg_analyzer_mac.h",
-      "sandboxed_rar_analyzer.cc",
-      "sandboxed_rar_analyzer.h",
       "sandboxed_zip_analyzer.cc",
       "sandboxed_zip_analyzer.h",
     ]
@@ -49,7 +47,6 @@ if (safe_browsing_mode == 1) {
 
     sources = [
       "sandboxed_dmg_analyzer_mac_unittest.cc",
-      "sandboxed_rar_analyzer_unittest.cc",
       "sandboxed_zip_analyzer_unittest.cc",
     ]
 
diff --git a/chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom b/chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom
index 266160351e18..15d5aaba3657 100644
--- a/chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom
+++ b/chrome/services/file_util/public/mojom/safe_archive_analyzer.mojom
@@ -22,13 +22,6 @@ interface SafeArchiveAnalyzer {
   // for malicious download protection.
   AnalyzeDmgFile(mojo_base.mojom.File dmg_file)
       => (SafeArchiveAnalyzerResults results);
-
-  // Build flag FULL_SAFE_BROWSING: Analyze the |rar_file| for malicious
-  // download protection. Uses the |temporary_file| to extract files from the
-  // |rar_file| archive.
-  AnalyzeRarFile(mojo_base.mojom.File rar_file,
-                 mojo_base.mojom.File temporary_file)
-      => (SafeArchiveAnalyzerResults results);
 };
 
 [Native]
diff --git a/chrome/services/file_util/safe_archive_analyzer.cc b/chrome/services/file_util/safe_archive_analyzer.cc
index a58249e88d08..db49c37b9b49 100644
--- a/chrome/services/file_util/safe_archive_analyzer.cc
+++ b/chrome/services/file_util/safe_archive_analyzer.cc
@@ -44,14 +44,3 @@ void SafeArchiveAnalyzer::AnalyzeDmgFile(base::File dmg_file,
   NOTREACHED();
 #endif
 }
-
-void SafeArchiveAnalyzer::AnalyzeRarFile(base::File rar_file,
-                                         base::File temporary_file,
-                                         AnalyzeRarFileCallback callback) {
-  DCHECK(rar_file.IsValid());
-
-  safe_browsing::ArchiveAnalyzerResults results;
-  safe_browsing::rar_analyzer::AnalyzeRarFile(
-      std::move(rar_file), std::move(temporary_file), &results);
-  std::move(callback).Run(results);
-}
diff --git a/chrome/services/file_util/safe_archive_analyzer.h b/chrome/services/file_util/safe_archive_analyzer.h
index 94d6ec0e16f8..2eda4f378bcc 100644
--- a/chrome/services/file_util/safe_archive_analyzer.h
+++ b/chrome/services/file_util/safe_archive_analyzer.h
@@ -25,9 +25,6 @@ class SafeArchiveAnalyzer : public chrome::mojom::SafeArchiveAnalyzer {
                       AnalyzeZipFileCallback callback) override;
   void AnalyzeDmgFile(base::File dmg_file,
                       AnalyzeDmgFileCallback callback) override;
-  void AnalyzeRarFile(base::File rar_file,
-                      base::File temporary_file,
-                      AnalyzeRarFileCallback callback) override;
 
   const std::unique_ptr<service_manager::ServiceContextRef> service_ref_;
 
