From 36f66526e925e81ba290c4625908bc2820bfcbeb Mon Sep 17 00:00:00 2001
From: Naomi Musgrave <nmusgrave@chromium.org>
Date: Fri, 3 Jul 2020 14:36:47 +0000
Subject: [PATCH] Implements receiver registration in NearbySharingService.

On registering a foreground or background receiver,
NearbySharingService starts advertising if the
appropriate conditions are met. On unregistering
one of the receivers, NearbySharingService updates
TransferUpdateCallback for background receivers and
re-sets the advertising state.

Bug: 1084647
Change-Id: I62b15b76db9a1286a95119b22e45a02fdde82dd5
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/2241547
Commit-Queue: Naomi Musgrave <nmusgrave@chromium.org>
Reviewed-by: Alex Chau <alexchau@chromium.org>
Cr-Commit-Position: refs/heads/master@{#785035}
---
 chrome/browser/BUILD.gn                       |   1 +
 .../fake_nearby_connections_manager.cc        |  14 +-
 .../fake_nearby_connections_manager.h         |  15 +-
 .../browser/nearby_sharing/file_attachment.cc |   4 +
 .../browser/nearby_sharing/file_attachment.h  |   2 +
 .../nearby_connections_manager.h              |   9 +-
 .../browser/nearby_sharing/nearby_constants.h |  26 +-
 .../nearby_sharing/nearby_sharing_prefs.cc    |  11 +
 .../nearby_sharing/nearby_sharing_prefs.h     |   4 +
 .../nearby_sharing/nearby_sharing_service.h   |  28 +-
 .../nearby_sharing_service_impl.cc            | 409 +++++++++++++++++-
 .../nearby_sharing_service_impl.h             |  76 +++-
 .../nearby_sharing_service_impl_unittest.cc   | 399 ++++++++++++++++-
 chrome/browser/nearby_sharing/share_target.cc |   4 +
 chrome/browser/nearby_sharing/share_target.h  |   2 +
 .../browser/nearby_sharing/text_attachment.cc |   6 +
 .../browser/nearby_sharing/text_attachment.h  |   2 +
 .../nearby_sharing/transfer_metadata.cc       |   7 +
 .../nearby_sharing/transfer_metadata.h        |   2 +
 .../nearby_sharing/transfer_update_callback.h |   4 +-
 chrome/test/BUILD.gn                          |   1 +
 21 files changed, 970 insertions(+), 56 deletions(-)

diff --git a/chrome/browser/BUILD.gn b/chrome/browser/BUILD.gn
index fd71f270a6d7..497db2478e71 100644
--- a/chrome/browser/BUILD.gn
+++ b/chrome/browser/BUILD.gn
@@ -3740,6 +3740,7 @@ static_library("browser") {
       "//chrome/common/themes:autogenerated_theme_util",
       "//chrome/services/sharing/public/cpp",
       "//chrome/services/sharing/public/mojom",
+      "//chrome/services/sharing/public/proto",
       "//chrome/services/speech:buildflags",
       "//components/feedback",
       "//components/image_fetcher/core",
diff --git a/chrome/browser/nearby_sharing/fake_nearby_connections_manager.cc b/chrome/browser/nearby_sharing/fake_nearby_connections_manager.cc
index 48568fdff4a2..a6a9a834f9ba 100644
--- a/chrome/browser/nearby_sharing/fake_nearby_connections_manager.cc
+++ b/chrome/browser/nearby_sharing/fake_nearby_connections_manager.cc
@@ -54,14 +54,16 @@ void FakeNearbyConnectionsManager::StartAdvertising(
     ConnectionsCallback callback) {
   is_shutdown_ = false;
   advertising_listener_ = listener;
-  // TODO(alexchau): Implement.
+  advertising_data_usage_ = data_usage;
+  advertising_power_level_ = power_level;
 }
 
 void FakeNearbyConnectionsManager::StopAdvertising() {
   DCHECK(IsAdvertising());
   DCHECK(!IsShutdown());
   advertising_listener_ = nullptr;
-  // TODO(alexchau): Implement.
+  advertising_data_usage_ = DataUsage::kUnknown;
+  advertising_power_level_ = PowerLevel::kUnknown;
 }
 
 void FakeNearbyConnectionsManager::StartDiscovery(
@@ -148,3 +150,11 @@ bool FakeNearbyConnectionsManager::IsDiscovering() {
 bool FakeNearbyConnectionsManager::IsShutdown() {
   return is_shutdown_;
 }
+
+DataUsage FakeNearbyConnectionsManager::GetAdvertisingDataUsage() {
+  return advertising_data_usage_;
+}
+
+PowerLevel FakeNearbyConnectionsManager::GetAdvertisingPowerLevel() {
+  return advertising_power_level_;
+}
diff --git a/chrome/browser/nearby_sharing/fake_nearby_connections_manager.h b/chrome/browser/nearby_sharing/fake_nearby_connections_manager.h
index 7399605927b5..c7f08982edf9 100644
--- a/chrome/browser/nearby_sharing/fake_nearby_connections_manager.h
+++ b/chrome/browser/nearby_sharing/fake_nearby_connections_manager.h
@@ -5,6 +5,11 @@
 #ifndef CHROME_BROWSER_NEARBY_SHARING_FAKE_NEARBY_CONNECTIONS_MANAGER_H_
 #define CHROME_BROWSER_NEARBY_SHARING_FAKE_NEARBY_CONNECTIONS_MANAGER_H_
 
+#include <memory>
+#include <string>
+#include <utility>
+#include <vector>
+
 #include "chrome/browser/nearby_sharing/nearby_connections_manager.h"
 
 // Fake NearbyConnectionsManager for testing.
@@ -65,11 +70,15 @@ class FakeNearbyConnectionsManager : public NearbyConnectionsManager {
   bool IsAdvertising();
   bool IsDiscovering();
   bool IsShutdown();
+  DataUsage GetAdvertisingDataUsage();
+  PowerLevel GetAdvertisingPowerLevel();
 
  private:
-  IncomingConnectionListener* advertising_listener_{nullptr};
-  DiscoveryListener* discovery_listener_{nullptr};
-  bool is_shutdown_{false};
+  IncomingConnectionListener* advertising_listener_ = nullptr;
+  DiscoveryListener* discovery_listener_ = nullptr;
+  bool is_shutdown_ = false;
+  DataUsage advertising_data_usage_ = DataUsage::kUnknown;
+  PowerLevel advertising_power_level_ = PowerLevel::kUnknown;
 };
 
 #endif  // CHROME_BROWSER_NEARBY_SHARING_FAKE_NEARBY_CONNECTIONS_MANAGER_H_
diff --git a/chrome/browser/nearby_sharing/file_attachment.cc b/chrome/browser/nearby_sharing/file_attachment.cc
index 1c41f84fa905..11191458fa76 100644
--- a/chrome/browser/nearby_sharing/file_attachment.cc
+++ b/chrome/browser/nearby_sharing/file_attachment.cc
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include <utility>
+
 #include "chrome/browser/nearby_sharing/file_attachment.h"
 
 FileAttachment::FileAttachment(std::string file_name,
@@ -16,6 +18,8 @@ FileAttachment::FileAttachment(std::string file_name,
       mime_type_(std::move(mime_type)) {}
 
 FileAttachment::~FileAttachment() = default;
+FileAttachment::FileAttachment(const FileAttachment&) = default;
+FileAttachment& FileAttachment::operator=(const FileAttachment&) = default;
 
 int64_t FileAttachment::size() const {
   return size_;
diff --git a/chrome/browser/nearby_sharing/file_attachment.h b/chrome/browser/nearby_sharing/file_attachment.h
index 3d089771c048..65ed319ebd18 100644
--- a/chrome/browser/nearby_sharing/file_attachment.h
+++ b/chrome/browser/nearby_sharing/file_attachment.h
@@ -34,6 +34,8 @@ class FileAttachment : public Attachment {
                  base::Optional<base::FilePath> file_path,
                  std::string mime_type);
   ~FileAttachment() override;
+  FileAttachment(const FileAttachment&);
+  FileAttachment& operator=(const FileAttachment&);
 
   // Attachment:
   int64_t size() const override;
diff --git a/chrome/browser/nearby_sharing/nearby_connections_manager.h b/chrome/browser/nearby_sharing/nearby_connections_manager.h
index d6ac91e86815..eb1fda7bf6d5 100644
--- a/chrome/browser/nearby_sharing/nearby_connections_manager.h
+++ b/chrome/browser/nearby_sharing/nearby_connections_manager.h
@@ -7,6 +7,7 @@
 
 #include <stdint.h>
 #include <memory>
+#include <string>
 #include <vector>
 
 #include "base/callback.h"
@@ -25,11 +26,13 @@ class NearbyConnectionsManager {
 
   // A callback for handling incoming connections while advertising.
   class IncomingConnectionListener {
+   public:
     virtual ~IncomingConnectionListener() = default;
 
-    virtual void OnIncomingConnection(const std::string& endpoint_id,
-                                      const std::vector<uint8_t>& endpoint_info,
-                                      NearbyConnection connection) = 0;
+    virtual void OnIncomingConnection(
+        const std::string& endpoint_id,
+        const std::vector<uint8_t>& endpoint_info,
+        std::unique_ptr<NearbyConnection> connection) = 0;
   };
 
   // A callback for handling discovered devices while discovering.
diff --git a/chrome/browser/nearby_sharing/nearby_constants.h b/chrome/browser/nearby_sharing/nearby_constants.h
index 225bbceee4f3..3bf9f1583a47 100644
--- a/chrome/browser/nearby_sharing/nearby_constants.h
+++ b/chrome/browser/nearby_sharing/nearby_constants.h
@@ -7,21 +7,35 @@
 
 // Represents the advertising bluetooth power for Nearby Connections.
 enum class PowerLevel {
-  kLowPower,
-  kMediumPower,
-  kHighPower,
+  kUnknown = 0,
+  kLowPower = 1,
+  kMediumPower = 2,
+  kHighPower = 3,
   kMaxValue = kHighPower
 };
 
 // Represents the data usage preference.
 enum class DataUsage {
+  kUnknown = 0,
   // User is never willing to use the Internet
-  kOffline,
+  kOffline = 1,
   // User is always willing to use the Internet
-  kOnline,
+  kOnline = 2,
   // User is willing to use the Internet on an unmetered connection.
-  kWifiOnly,
+  kWifiOnly = 3,
   kMaxValue = kWifiOnly
 };
 
+// Represents the visibility of the advertisement.
+enum class Visibility {
+  kUnknown = 0,
+  // The user is not advertising to anyone.
+  kNoOne = 1,
+  // The user is visible to all contacts.
+  kAllContacts = 2,
+  // The user is only visible to selected contacts.
+  kSelectedContacts = 3,
+  kMaxValue = kSelectedContacts,
+};
+
 #endif  // CHROME_BROWSER_NEARBY_SHARING_NEARBY_CONSTANTS_H_
diff --git a/chrome/browser/nearby_sharing/nearby_sharing_prefs.cc b/chrome/browser/nearby_sharing/nearby_sharing_prefs.cc
index 43bc3c371fd3..8c9b3c5d51a8 100644
--- a/chrome/browser/nearby_sharing/nearby_sharing_prefs.cc
+++ b/chrome/browser/nearby_sharing/nearby_sharing_prefs.cc
@@ -14,6 +14,9 @@
 const char prefs::kNearbySharingEnabledPrefName[] = "nearby_sharing.enabled";
 const char prefs::kNearbySharingActiveProfilePrefName[] =
     "nearby_sharing.active_profile";
+const char prefs::kNearbySharingBackgroundVisibilityName[] =
+    "nearby_sharing.background_visibility";
+const char prefs::kNearbySharingDataUsageName[] = "nearby_sharing.data_usage";
 
 void RegisterNearbySharingPrefs(user_prefs::PrefRegistrySyncable* registry) {
   // This pref is not synced.
@@ -22,6 +25,14 @@ void RegisterNearbySharingPrefs(user_prefs::PrefRegistrySyncable* registry) {
   registry->RegisterBooleanPref(
       prefs::kNearbySharingEnabledPrefName, true /* default_value */,
       PrefRegistry::PrefRegistrationFlags::NO_REGISTRATION_FLAGS /* flags */);
+  registry->RegisterIntegerPref(
+      prefs::kNearbySharingBackgroundVisibilityName,
+      static_cast<int>(Visibility::kNoOne) /* default_value */,
+      PrefRegistry::PrefRegistrationFlags::NO_REGISTRATION_FLAGS /* flags */);
+  registry->RegisterIntegerPref(
+      prefs::kNearbySharingDataUsageName,
+      static_cast<int>(DataUsage::kWifiOnly) /* default_value */,
+      PrefRegistry::PrefRegistrationFlags::NO_REGISTRATION_FLAGS /* flags */);
 }
 
 void RegisterNearbySharingLocalPrefs(PrefRegistrySimple* local_state) {
diff --git a/chrome/browser/nearby_sharing/nearby_sharing_prefs.h b/chrome/browser/nearby_sharing/nearby_sharing_prefs.h
index f61b86de7e41..700e2c3740ec 100644
--- a/chrome/browser/nearby_sharing/nearby_sharing_prefs.h
+++ b/chrome/browser/nearby_sharing/nearby_sharing_prefs.h
@@ -5,6 +5,8 @@
 #ifndef CHROME_BROWSER_NEARBY_SHARING_NEARBY_SHARING_PREFS_H_
 #define CHROME_BROWSER_NEARBY_SHARING_NEARBY_SHARING_PREFS_H_
 
+#include "chrome/browser/nearby_sharing/nearby_constants.h"
+
 namespace user_prefs {
 class PrefRegistrySyncable;
 }  // namespace user_prefs
@@ -14,6 +16,8 @@ class PrefRegistrySimple;
 namespace prefs {
 extern const char kNearbySharingEnabledPrefName[];
 extern const char kNearbySharingActiveProfilePrefName[];
+extern const char kNearbySharingBackgroundVisibilityName[];
+extern const char kNearbySharingDataUsageName[];
 }  // namespace prefs
 
 void RegisterNearbySharingPrefs(user_prefs::PrefRegistrySyncable* registry);
diff --git a/chrome/browser/nearby_sharing/nearby_sharing_service.h b/chrome/browser/nearby_sharing/nearby_sharing_service.h
index d92e3a699ea3..894f925c1eaa 100644
--- a/chrome/browser/nearby_sharing/nearby_sharing_service.h
+++ b/chrome/browser/nearby_sharing/nearby_sharing_service.h
@@ -25,6 +25,15 @@ class NearbySharingService {
     kError,
   };
 
+  enum class ReceiveSurfaceState {
+    // Default, invalid state.
+    kUnknown,
+    // Background receive surface advertises only to contacts.
+    kBackground,
+    // Foreground receive surface advertises to everyone.
+    kForeground,
+  };
+
   using StatusCodesCallback =
       base::OnceCallback<void(StatusCodes status_codes)>;
 
@@ -33,25 +42,24 @@ class NearbySharingService {
   // Registers a send surface for handling payload transfer status and device
   // discovery.
   virtual void RegisterSendSurface(
-      TransferUpdateCallback* transferCallback,
-      ShareTargetDiscoveredCallback* discoveryCallback,
+      TransferUpdateCallback* transfer_callback,
+      ShareTargetDiscoveredCallback* discovery_callback,
       StatusCodesCallback status_codes_callback) = 0;
 
   // Unregisters the current send surface.
   virtual void UnregisterSendSurface(
-      TransferUpdateCallback* transferCallback,
-      ShareTargetDiscoveredCallback* discoveryCallback,
+      TransferUpdateCallback* transfer_callback,
+      ShareTargetDiscoveredCallback* discovery_callback,
       StatusCodesCallback status_codes_callback) = 0;
 
   // Registers a receiver surface for handling payload transfer status.
-  virtual void RegisterReceiveSurface(
-      TransferUpdateCallback* transferCallback,
-      StatusCodesCallback status_codes_callback) = 0;
+  virtual StatusCodes RegisterReceiveSurface(
+      TransferUpdateCallback* transfer_callback,
+      ReceiveSurfaceState state) = 0;
 
   // Unregistesrs the current receive surface.
-  virtual void UnregisterReceiveSurface(
-      TransferUpdateCallback* transferCallback,
-      StatusCodesCallback status_codes_callback) = 0;
+  virtual StatusCodes UnregisterReceiveSurface(
+      TransferUpdateCallback* transfer_callback) = 0;
 
   // Sends text to the remote |share_target|.
   virtual void SendText(const ShareTarget& share_target,
diff --git a/chrome/browser/nearby_sharing/nearby_sharing_service_impl.cc b/chrome/browser/nearby_sharing/nearby_sharing_service_impl.cc
index 2bb7dee36521..0cfc44765e2c 100644
--- a/chrome/browser/nearby_sharing/nearby_sharing_service_impl.cc
+++ b/chrome/browser/nearby_sharing/nearby_sharing_service_impl.cc
@@ -12,8 +12,100 @@
 #include "chrome/browser/nearby_sharing/fast_initiation_manager.h"
 #include "chrome/browser/nearby_sharing/nearby_connections_manager.h"
 #include "chrome/browser/nearby_sharing/nearby_sharing_prefs.h"
+#include "chrome/services/sharing/public/cpp/advertisement.h"
+#include "chrome/services/sharing/public/mojom/nearby_connections_types.mojom.h"
 #include "components/prefs/pref_service.h"
 #include "device/bluetooth/bluetooth_adapter_factory.h"
+#include "ui/base/idle/idle.h"
+
+namespace {
+
+std::string ReceiveSurfaceStateToString(
+    NearbySharingService::ReceiveSurfaceState state) {
+  switch (state) {
+    case NearbySharingService::ReceiveSurfaceState::kForeground:
+      return "FOREGROUND";
+    case NearbySharingService::ReceiveSurfaceState::kBackground:
+      return "BACKGROUND";
+    case NearbySharingService::ReceiveSurfaceState::kUnknown:
+      return "UNKNOWN";
+  }
+}
+
+std::string DataUsageToString(DataUsage usage) {
+  switch (usage) {
+    case DataUsage::kOffline:
+      return "OFFLINE";
+    case DataUsage::kOnline:
+      return "ONLINE";
+    case DataUsage::kWifiOnly:
+      return "WIFI_ONLY";
+    case DataUsage::kUnknown:
+      return "UNKNOWN";
+  }
+}
+
+std::string PowerLevelToString(PowerLevel level) {
+  switch (level) {
+    case PowerLevel::kLowPower:
+      return "LOW_POWER";
+    case PowerLevel::kMediumPower:
+      return "MEDIUM_POWER";
+    case PowerLevel::kHighPower:
+      return "HIGH_POWER";
+    case PowerLevel::kUnknown:
+      return "UNKNOWN";
+  }
+}
+
+std::string VisibilityToString(Visibility visibility) {
+  switch (visibility) {
+    case Visibility::kNoOne:
+      return "NO_ONE";
+    case Visibility::kAllContacts:
+      return "ALL_CONTACTS";
+    case Visibility::kSelectedContacts:
+      return "SELECTED_CONTACTS";
+    case Visibility::kUnknown:
+      return "UNKNOWN";
+  }
+}
+
+std::string ConnectionsStatusToString(
+    NearbyConnectionsManager::ConnectionsStatus status) {
+  switch (status) {
+    case NearbyConnectionsManager::ConnectionsStatus::kSuccess:
+      return "SUCCESS";
+    case NearbyConnectionsManager::ConnectionsStatus::kError:
+      return "ERROR";
+    case NearbyConnectionsManager::ConnectionsStatus::kOutOfOrderApiCall:
+      return "OUT_OF_ORDER_API_CALL";
+    case NearbyConnectionsManager::ConnectionsStatus::
+        kAlreadyHaveActiveStrategy:
+      return "ALREADY_HAVE_ACTIVE_STRATEGY";
+    case NearbyConnectionsManager::ConnectionsStatus::kAlreadyAdvertising:
+      return "ALREADY_ADVERTISING";
+    case NearbyConnectionsManager::ConnectionsStatus::kAlreadyDiscovering:
+      return "ALREADY_DISCOVERING";
+    case NearbyConnectionsManager::ConnectionsStatus::kEndpointIOError:
+      return "ENDPOINT_IO_ERROR";
+    case NearbyConnectionsManager::ConnectionsStatus::kEndpointUnknown:
+      return "ENDPOINT_UNKNOWN";
+    case NearbyConnectionsManager::ConnectionsStatus::kConnectionRejected:
+      return "CONNECTION_REJECTED";
+    case NearbyConnectionsManager::ConnectionsStatus::
+        kAlreadyConnectedToEndpoint:
+      return "ALREADY_CONNECTED_TO_ENDPOINT";
+    case NearbyConnectionsManager::ConnectionsStatus::kNotConnectedToEndpoint:
+      return "NOT_CONNECTED_TO_ENDPOINT";
+    case NearbyConnectionsManager::ConnectionsStatus::kRadioError:
+      return "RADIO_ERROR";
+    case NearbyConnectionsManager::ConnectionsStatus::kPayloadUnknown:
+      return "PAYLOAD_UNKNOWN";
+  }
+}
+
+}  // namespace
 
 NearbySharingServiceImpl::NearbySharingServiceImpl(
     PrefService* prefs,
@@ -40,6 +132,14 @@ NearbySharingServiceImpl::NearbySharingServiceImpl(
       prefs::kNearbySharingEnabledPrefName,
       base::BindRepeating(&NearbySharingServiceImpl::OnEnabledPrefChanged,
                           base::Unretained(this)));
+  pref_change_registrar_.Add(
+      prefs::kNearbySharingBackgroundVisibilityName,
+      base::BindRepeating(&NearbySharingServiceImpl::OnVisibilityPrefChanged,
+                          base::Unretained(this)));
+  pref_change_registrar_.Add(
+      prefs::kNearbySharingDataUsageName,
+      base::BindRepeating(&NearbySharingServiceImpl::OnDataUsagePrefChanged,
+                          base::Unretained(this)));
 
   GetBluetoothAdapter();
 }
@@ -50,31 +150,100 @@ NearbySharingServiceImpl::~NearbySharingServiceImpl() {
 }
 
 void NearbySharingServiceImpl::RegisterSendSurface(
-    TransferUpdateCallback* transferCallback,
-    ShareTargetDiscoveredCallback* discoveryCallback,
+    TransferUpdateCallback* transfer_callback,
+    ShareTargetDiscoveredCallback* discovery_callback,
     StatusCodesCallback status_codes_callback) {
   register_send_surface_callback_ = std::move(status_codes_callback);
   StartFastInitiationAdvertising();
 }
 
 void NearbySharingServiceImpl::UnregisterSendSurface(
-    TransferUpdateCallback* transferCallback,
-    ShareTargetDiscoveredCallback* discoveryCallback,
+    TransferUpdateCallback* transfer_callback,
+    ShareTargetDiscoveredCallback* discovery_callback,
     StatusCodesCallback status_codes_callback) {
   unregister_send_surface_callback_ = std::move(status_codes_callback);
   StopFastInitiationAdvertising();
 }
 
-void NearbySharingServiceImpl::RegisterReceiveSurface(
-    TransferUpdateCallback* transferCallback,
-    StatusCodesCallback status_codes_callback) {
-  std::move(status_codes_callback).Run(StatusCodes::kOk);
+NearbySharingService::StatusCodes
+NearbySharingServiceImpl::RegisterReceiveSurface(
+    TransferUpdateCallback* transfer_callback,
+    ReceiveSurfaceState state) {
+  DCHECK(transfer_callback);
+  DCHECK_NE(state, ReceiveSurfaceState::kUnknown);
+  if (foreground_receive_callbacks_.HasObserver(transfer_callback) ||
+      background_receive_callbacks_.HasObserver(transfer_callback)) {
+    VLOG(1) << __func__
+            << ": registerReceiveSurface failed. Already registered.";
+    return StatusCodes::kError;
+  }
+
+  // If the receive surface to be registered is a foreground surface, let it
+  // catch up with most recent transfer metadata immediately.
+  if (state == ReceiveSurfaceState::kForeground && last_incoming_metadata_) {
+    transfer_callback->OnTransferUpdate(last_incoming_metadata_->first,
+                                        last_incoming_metadata_->second);
+  }
+
+  if (state == ReceiveSurfaceState::kForeground) {
+    foreground_receive_callbacks_.AddObserver(transfer_callback);
+  } else {
+    background_receive_callbacks_.AddObserver(transfer_callback);
+  }
+
+  VLOG(1) << __func__ << ": A ReceiveSurface("
+          << ReceiveSurfaceStateToString(state) << ") has been registered";
+  InvalidateReceiveSurfaceState();
+  return StatusCodes::kOk;
 }
 
-void NearbySharingServiceImpl::UnregisterReceiveSurface(
-    TransferUpdateCallback* transferCallback,
-    StatusCodesCallback status_codes_callback) {
-  std::move(status_codes_callback).Run(StatusCodes::kOk);
+NearbySharingService::StatusCodes
+NearbySharingServiceImpl::UnregisterReceiveSurface(
+    TransferUpdateCallback* transfer_callback) {
+  DCHECK(transfer_callback);
+  bool is_foreground =
+      foreground_receive_callbacks_.HasObserver(transfer_callback);
+  bool is_background =
+      background_receive_callbacks_.HasObserver(transfer_callback);
+  if (!is_foreground && !is_background) {
+    VLOG(1)
+        << __func__
+        << ": unregisterReceiveSurface failed. Unknown TransferUpdateCallback.";
+    return StatusCodes::kError;
+  }
+
+  if (foreground_receive_callbacks_.might_have_observers() &&
+      last_incoming_metadata_ &&
+      last_incoming_metadata_->second.is_final_status()) {
+    // We already saw the final status in the foreground.
+    // Nullify it so the next time the user opens sharing, it starts the UI from
+    // the beginning
+    last_incoming_metadata_.reset();
+  }
+
+  if (is_foreground) {
+    foreground_receive_callbacks_.RemoveObserver(transfer_callback);
+  } else {
+    background_receive_callbacks_.RemoveObserver(transfer_callback);
+  }
+
+  // Displays the most recent payload status processed by foreground surfaces on
+  // background surface.
+  if (!foreground_receive_callbacks_.might_have_observers() &&
+      last_incoming_metadata_) {
+    for (TransferUpdateCallback& background_callback :
+         background_receive_callbacks_) {
+      background_callback.OnTransferUpdate(last_incoming_metadata_->first,
+                                           last_incoming_metadata_->second);
+    }
+  }
+
+  VLOG(1) << __func__ << ": A ReceiveSurface("
+          << (is_foreground ? "foreground" : "background")
+          << ") has been unregistered";
+
+  InvalidateReceiveSurfaceState();
+  return StatusCodes::kOk;
 }
 
 void NearbySharingServiceImpl::NearbySharingServiceImpl::SendText(
@@ -132,6 +301,13 @@ void NearbySharingServiceImpl::OnNearbyProcessStopped() {
   }
 }
 
+void NearbySharingServiceImpl::OnIncomingConnection(
+    const std::string& endpoint_id,
+    const std::vector<uint8_t>& endpoint_info,
+    std::unique_ptr<NearbyConnection> connection) {
+  // TODO(crbug/1085068): Handle incoming connection; use CertificateManager
+}
+
 bool NearbySharingServiceImpl::IsEnabled() {
   return prefs_->GetBoolean(prefs::kNearbySharingEnabledPrefName);
 }
@@ -141,12 +317,67 @@ void NearbySharingServiceImpl::OnEnabledPrefChanged() {
     VLOG(1) << __func__ << ": Nearby sharing enabled!";
   } else {
     VLOG(1) << __func__ << ": Nearby sharing disabled!";
-    // TODO(crbug/1084647): Stop advertising.
+    StopAdvertising();
     // TODO(crbug/1085067): Stop discovery.
     nearby_connections_manager_->Shutdown();
   }
 }
 
+bool NearbySharingServiceImpl::IsVisibleInBackground(Visibility visibility) {
+  return visibility == Visibility::kAllContacts ||
+         visibility == Visibility::kSelectedContacts;
+}
+
+Visibility NearbySharingServiceImpl::GetVisibilityPref() {
+  int visibility =
+      prefs_->GetInteger(prefs::kNearbySharingBackgroundVisibilityName);
+  if (visibility < 0 || visibility > static_cast<int>(Visibility::kMaxValue))
+    return Visibility::kUnknown;
+
+  return static_cast<Visibility>(visibility);
+}
+
+void NearbySharingServiceImpl::OnVisibilityPrefChanged() {
+  Visibility new_visibility = GetVisibilityPref();
+  if (advertising_visibilty_preference_ == new_visibility) {
+    VLOG(1) << __func__ << ": Nearby sharing visibility pref is unchanged";
+    return;
+  }
+
+  advertising_visibilty_preference_ = new_visibility;
+  VLOG(1) << __func__ << ": Nearby sharing visibility changed to "
+          << VisibilityToString(advertising_visibilty_preference_);
+
+  if (advertising_power_level_ != PowerLevel::kUnknown) {
+    StopAdvertising();
+  }
+
+  InvalidateReceiveSurfaceState();
+}
+
+DataUsage NearbySharingServiceImpl::GetDataUsagePref() {
+  int usage = prefs_->GetInteger(prefs::kNearbySharingDataUsageName);
+  if (usage < 0 || usage > static_cast<int>(DataUsage::kMaxValue))
+    return DataUsage::kUnknown;
+
+  return static_cast<DataUsage>(usage);
+}
+
+void NearbySharingServiceImpl::OnDataUsagePrefChanged() {
+  DataUsage new_data_usage = GetDataUsagePref();
+  if (advertising_data_usage_preference_ == new_data_usage) {
+    VLOG(1) << __func__ << ": Nearby sharing data usage pref is unchanged";
+    return;
+  }
+
+  VLOG(1) << __func__ << ": Nearby sharing data usage changed.";
+  if (advertising_power_level_ != PowerLevel::kUnknown) {
+    StopAdvertising();
+  }
+
+  InvalidateReceiveSurfaceState();
+}
+
 void NearbySharingServiceImpl::StartFastInitiationAdvertising() {
   if (!IsBluetoothPresent() || !IsBluetoothPowered()) {
     std::move(register_send_surface_callback_).Run(StatusCodes::kError);
@@ -250,3 +481,155 @@ void NearbySharingServiceImpl::AdapterPoweredChanged(
   if (!powered)
     StopFastInitiationAdvertising();
 }
+
+void NearbySharingServiceImpl::InvalidateReceiveSurfaceState() {
+  InvalidateAdvertisingState();
+  // TODO(crbug/154846208) InvalidateFastInitScan();
+}
+
+void NearbySharingServiceImpl::InvalidateAdvertisingState() {
+  // Screen is off. Do no work.
+  if (ui::CheckIdleStateIsLocked()) {
+    StopAdvertising();
+    VLOG(1) << __func__
+            << ": Stopping advertising because the screen is locked.";
+    return;
+  }
+
+  // Check if Wifi or Ethernet LAN is off.  Advertisements won't work, so
+  // disable them, unless bluetooth is known to be enabled. Not all platforms
+  // have bluetooth, so wifi LAN is a platform-agnostic check.
+  net::NetworkChangeNotifier::ConnectionType connection_type =
+      net::NetworkChangeNotifier::GetConnectionType();
+  if (!IsBluetoothPresent() &&
+      !(connection_type ==
+            net::NetworkChangeNotifier::ConnectionType::CONNECTION_WIFI ||
+        connection_type ==
+            net::NetworkChangeNotifier::ConnectionType::CONNECTION_ETHERNET)) {
+    StopAdvertising();
+    VLOG(1) << __func__
+            << ": Stopping advertising because both bluetooth and wifi LAN are "
+               "disabled.";
+    return;
+  }
+
+  // Nearby Sharing is disabled. Don't advertise.
+  if (!IsEnabled()) {
+    StopAdvertising();
+    VLOG(1) << __func__
+            << ": Stopping advertising because Nearby Sharing is disabled.";
+    return;
+  }
+
+  // We're scanning for other nearby devices. Don't advertise.
+  if (is_scanning_) {
+    StopAdvertising();
+    VLOG(1)
+        << __func__
+        << ": Stopping advertising because we're scanning for other devices.";
+    return;
+  }
+
+  if (is_transferring_files_) {
+    StopAdvertising();
+    VLOG(1) << __func__
+            << ": Stopping advertising because we're currently in the midst of "
+               "a transfer.";
+    return;
+  }
+
+  if (!foreground_receive_callbacks_.might_have_observers() &&
+      !background_receive_callbacks_.might_have_observers()) {
+    StopAdvertising();
+    VLOG(1)
+        << __func__
+        << ": Stopping advertising because no receive surface is registered.";
+    return;
+  }
+
+  if (!IsVisibleInBackground(advertising_visibilty_preference_) &&
+      !foreground_receive_callbacks_.might_have_observers()) {
+    StopAdvertising();
+    VLOG(1) << __func__
+            << ": Stopping advertising because no high power receive surface "
+               "is registered and device is visible to NO_ONE.";
+    return;
+  }
+
+  PowerLevel power_level;
+  if (foreground_receive_callbacks_.might_have_observers()) {
+    power_level = PowerLevel::kHighPower;
+    // TODO(crbug/1100367) handle fast init
+    // } else if (isFastInitDeviceNearby) {
+    //   power_level = PowerLevel::kMediumPower;
+  } else {
+    power_level = PowerLevel::kLowPower;
+  }
+
+  DataUsage data_usage = GetDataUsagePref();
+  if (advertising_power_level_ != PowerLevel::kUnknown) {
+    if (power_level == advertising_power_level_ &&
+        data_usage == advertising_data_usage_preference_) {
+      VLOG(1) << __func__
+              << "Failed to advertise because we're already advertising with "
+                 "power level "
+              << PowerLevelToString(advertising_power_level_)
+              << " and data usage preference "
+              << DataUsageToString(advertising_data_usage_preference_);
+      return;
+    }
+
+    StopAdvertising();
+    VLOG(1) << __func__ << ": Restart advertising with power level "
+            << PowerLevelToString(power_level) << " and data usage preference "
+            << DataUsageToString(data_usage);
+  }
+
+  // Starts advertising through Nearby Connections. Caller is expected to ensure
+  // |listener| remains valid until StopAdvertising is called.
+
+  // TODO(nmusgrave) fill values from CertificateManager
+  std::vector<uint8_t> salt(sharing::Advertisement::kSaltSize, 0);
+  std::vector<uint8_t> encrypted_metadata_key(
+      sharing::Advertisement::kMetadataEncryptionKeyHashByteSize, 0);
+
+  // TODO(nmusgrave) fill value from local device data manager
+  base::Optional<std::string> device_name = "todo_device_name";
+  std::vector<uint8_t> endpoint_info =
+      sharing::Advertisement::NewInstance(std::move(salt),
+                                          std::move(encrypted_metadata_key),
+                                          std::move(device_name))
+          ->ToEndpointInfo();
+  nearby_connections_manager_->StartAdvertising(
+      std::move(endpoint_info),
+      /* listener= */ this, power_level, data_usage,
+      base::BindOnce([](NearbyConnectionsManager::ConnectionsStatus status) {
+        VLOG(1)
+            << __func__
+            << ": Advertising attempted over Nearby Connections with result "
+            << ConnectionsStatusToString(status);
+      }));
+
+  advertising_power_level_ = power_level;
+  advertising_data_usage_preference_ = data_usage;
+  VLOG(1) << __func__ << ": Advertising has started over Nearby Connections: "
+          << " power level " << PowerLevelToString(power_level)
+          << " visibility "
+          << VisibilityToString(advertising_visibilty_preference_)
+          << " data usage " << DataUsageToString(data_usage);
+  return;
+}
+
+void NearbySharingServiceImpl::StopAdvertising() {
+  if (advertising_power_level_ == PowerLevel::kUnknown) {
+    VLOG(1) << __func__
+            << ": Failed to stop advertising because we weren't advertising";
+    return;
+  }
+
+  nearby_connections_manager_->StopAdvertising();
+
+  advertising_data_usage_preference_ = DataUsage::kUnknown;
+  advertising_power_level_ = PowerLevel::kUnknown;
+  VLOG(1) << __func__ << ": Advertising has stopped";
+}
diff --git a/chrome/browser/nearby_sharing/nearby_sharing_service_impl.h b/chrome/browser/nearby_sharing/nearby_sharing_service_impl.h
index 6e43e2ba6793..95c298443044 100644
--- a/chrome/browser/nearby_sharing/nearby_sharing_service_impl.h
+++ b/chrome/browser/nearby_sharing/nearby_sharing_service_impl.h
@@ -7,26 +7,30 @@
 
 #include <memory>
 #include <string>
+#include <utility>
 #include <vector>
 
 #include "base/memory/ptr_util.h"
 #include "base/memory/weak_ptr.h"
 #include "base/scoped_observer.h"
+#include "chrome/browser/nearby_sharing/nearby_connections_manager.h"
+#include "chrome/browser/nearby_sharing/nearby_constants.h"
 #include "chrome/browser/nearby_sharing/nearby_process_manager.h"
 #include "chrome/browser/nearby_sharing/nearby_sharing_service.h"
 #include "components/keyed_service/core/keyed_service.h"
 #include "components/prefs/pref_change_registrar.h"
-#include "device/bluetooth/bluetooth_adapter.h"
 
 class FastInitiationManager;
 class NearbyConnectionsManager;
 class PrefService;
 class Profile;
 
-class NearbySharingServiceImpl : public NearbySharingService,
-                                 public KeyedService,
-                                 public NearbyProcessManager::Observer,
-                                 public device::BluetoothAdapter::Observer {
+class NearbySharingServiceImpl
+    : public NearbySharingService,
+      public KeyedService,
+      public NearbyProcessManager::Observer,
+      public device::BluetoothAdapter::Observer,
+      public NearbyConnectionsManager::IncomingConnectionListener {
  public:
   explicit NearbySharingServiceImpl(
       PrefService* prefs,
@@ -35,19 +39,17 @@ class NearbySharingServiceImpl : public NearbySharingService,
   ~NearbySharingServiceImpl() override;
 
   // NearbySharingService:
-  void RegisterSendSurface(TransferUpdateCallback* transferCallback,
-                           ShareTargetDiscoveredCallback* discoveryCallback,
+  void RegisterSendSurface(TransferUpdateCallback* transfer_callback,
+                           ShareTargetDiscoveredCallback* discovery_callback,
                            StatusCodesCallback status_codes_callback) override;
   void UnregisterSendSurface(
-      TransferUpdateCallback* transferCallback,
-      ShareTargetDiscoveredCallback* discoveryCallback,
-      StatusCodesCallback status_codes_callback) override;
-  void RegisterReceiveSurface(
-      TransferUpdateCallback* transferCallback,
-      StatusCodesCallback status_codes_callback) override;
-  void UnregisterReceiveSurface(
-      TransferUpdateCallback* transferCallback,
+      TransferUpdateCallback* transfer_callback,
+      ShareTargetDiscoveredCallback* discovery_callback,
       StatusCodesCallback status_codes_callback) override;
+  StatusCodes RegisterReceiveSurface(TransferUpdateCallback* transfer_callback,
+                                     ReceiveSurfaceState state) override;
+  StatusCodes UnregisterReceiveSurface(
+      TransferUpdateCallback* transfer_callback) override;
   void SendText(const ShareTarget& share_target,
                 std::string text,
                 StatusCodesCallback status_codes_callback) override;
@@ -68,9 +70,20 @@ class NearbySharingServiceImpl : public NearbySharingService,
   void OnNearbyProcessStarted() override;
   void OnNearbyProcessStopped() override;
 
+  // NearbyConnectionsManager::IncomingConnectionListener:
+  void OnIncomingConnection(
+      const std::string& endpoint_id,
+      const std::vector<uint8_t>& endpoint_info,
+      std::unique_ptr<NearbyConnection> connection) override;
+
  private:
   bool IsEnabled();
   void OnEnabledPrefChanged();
+  Visibility GetVisibilityPref();
+  bool IsVisibleInBackground(Visibility visibility);
+  void OnVisibilityPrefChanged();
+  DataUsage GetDataUsagePref();
+  void OnDataUsagePrefChanged();
   void StartFastInitiationAdvertising();
   void StopFastInitiationAdvertising();
   void GetBluetoothAdapter();
@@ -84,6 +97,9 @@ class NearbySharingServiceImpl : public NearbySharingService,
                              bool present) override;
   void AdapterPoweredChanged(device::BluetoothAdapter* adapter,
                              bool powered) override;
+  void InvalidateReceiveSurfaceState();
+  void InvalidateAdvertisingState();
+  void StopAdvertising();
 
   PrefService* prefs_;
   Profile* profile_;
@@ -95,6 +111,36 @@ class NearbySharingServiceImpl : public NearbySharingService,
   std::unique_ptr<FastInitiationManager> fast_initiation_manager_;
   StatusCodesCallback register_send_surface_callback_;
   StatusCodesCallback unregister_send_surface_callback_;
+
+  // A list of foreground receivers.
+  base::ObserverList<TransferUpdateCallback> foreground_receive_callbacks_;
+  // A list of foreground receivers.
+  base::ObserverList<TransferUpdateCallback> background_receive_callbacks_;
+
+  // Registers the most recent TransferMetadata and ShareTarget used for
+  // transitioning notifications between foreground surfaces and background
+  // surfaces. Empty if no metadata is available.
+  base::Optional<std::pair<ShareTarget, TransferMetadata>>
+      last_incoming_metadata_;
+  // The most recent outgoing TransferMetadata and ShareTarget.
+  base::Optional<std::pair<ShareTarget, TransferMetadata>>
+      last_outgoing_metadata_;
+
+  // The current advertising power level. PowerLevel::kUnknown while not
+  // advertising.
+  PowerLevel advertising_power_level_ = PowerLevel::kUnknown;
+  // The current advertising data usage preference. We need to restart scan
+  // (Fast Init) or advertise (Nearby Connections or Fast Init) when online
+  // preference changes. DataUsage::kUnknown while not advertising.
+  DataUsage advertising_data_usage_preference_ = DataUsage::kUnknown;
+  // The current visibility preference. We need to restart advertising if
+  // the visibility changes.
+  Visibility advertising_visibilty_preference_ = Visibility::kUnknown;
+  // True if we are currently scanning for remote devices.
+  bool is_scanning_ = false;
+  // True if we're currently sending or receiving a file.
+  bool is_transferring_files_ = false;
+
   base::WeakPtrFactory<NearbySharingServiceImpl> weak_ptr_factory_{this};
 };
 
diff --git a/chrome/browser/nearby_sharing/nearby_sharing_service_impl_unittest.cc b/chrome/browser/nearby_sharing/nearby_sharing_service_impl_unittest.cc
index 5fa25789f5f7..d1debce4b75a 100644
--- a/chrome/browser/nearby_sharing/nearby_sharing_service_impl_unittest.cc
+++ b/chrome/browser/nearby_sharing/nearby_sharing_service_impl_unittest.cc
@@ -22,13 +22,17 @@
 #include "device/bluetooth/bluetooth_adapter.h"
 #include "device/bluetooth/bluetooth_adapter_factory.h"
 #include "device/bluetooth/test/mock_bluetooth_adapter.h"
+#include "net/base/mock_network_change_notifier.h"
 #include "testing/gmock/include/gmock/gmock.h"
 #include "testing/gtest/include/gtest/gtest.h"
+#include "ui/base/idle/scoped_set_idle_state.h"
 
 using ::testing::_;
 using testing::NiceMock;
 using testing::Return;
 
+using NetConnectionType = net::NetworkChangeNotifier::ConnectionType;
+
 class FakeFastInitiationManager : public FastInitiationManager {
  public:
   explicit FakeFastInitiationManager(
@@ -113,6 +117,15 @@ class FakeFastInitiationManagerFactory : public FastInitiationManager::Factory {
       this};
 };
 
+class FakeTransferUpdateCallback : public TransferUpdateCallback {
+ public:
+  void OnTransferUpdate(const ShareTarget& shareTarget,
+                        const TransferMetadata& transferMetadata) override {
+    // TODO(crbug/1085068): Test transfer update callback when incoming
+    // connection is handled.
+  }
+};
+
 namespace {
 
 class NearbySharingServiceImplTest : public testing::Test {
@@ -171,7 +184,7 @@ class NearbySharingServiceImplTest : public testing::Test {
     base::RunLoop run_loop;
     NearbySharingService::StatusCodes result;
     service_->RegisterSendSurface(
-        /*transferCallback=*/nullptr, /*discoveryCallback=*/nullptr,
+        /*transfer_callback=*/nullptr, /*discovery_callback=*/nullptr,
         base::BindOnce(
             [](base::OnceClosure quit_closure,
                NearbySharingService::StatusCodes* result,
@@ -188,7 +201,7 @@ class NearbySharingServiceImplTest : public testing::Test {
     base::RunLoop run_loop;
     NearbySharingService::StatusCodes result;
     service_->UnregisterSendSurface(
-        /*transferCallback=*/nullptr, /*discoveryCallback=*/nullptr,
+        /*transfer_callback=*/nullptr, /*discovery_callback=*/nullptr,
         base::BindOnce(
             [](base::OnceClosure quit_closure,
                NearbySharingService::StatusCodes* result,
@@ -209,6 +222,12 @@ class NearbySharingServiceImplTest : public testing::Test {
     adapter_observer_ = observer;
   }
 
+  void SetConnectionType(net::NetworkChangeNotifier::ConnectionType type) {
+    network_notifier_->SetConnectionType(type);
+    network_notifier_->NotifyObserversOfNetworkChangeForTests(
+        network_notifier_->GetConnectionType());
+  }
+
  protected:
   content::BrowserTaskEnvironment task_environment_;
   TestingProfileManager profile_manager_{TestingBrowserProcess::GetGlobal()};
@@ -221,6 +240,8 @@ class NearbySharingServiceImplTest : public testing::Test {
   bool is_bluetooth_powered_ = true;
   device::BluetoothAdapter::Observer* adapter_observer_ = nullptr;
   scoped_refptr<NiceMock<device::MockBluetoothAdapter>> mock_bluetooth_adapter_;
+  std::unique_ptr<net::test::MockNetworkChangeNotifier> network_notifier_ =
+      net::test::MockNetworkChangeNotifier::Create();
 };
 
 }  // namespace
@@ -302,3 +323,377 @@ TEST_F(NearbySharingServiceImplTest,
   EXPECT_TRUE(fast_initiation_manager_factory_
                   ->StopAdvertisingCalledAndManagerDestroyed());
 }
+
+TEST_F(NearbySharingServiceImplTest,
+       ForegroundRegisterReceiveSurfaceIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_EQ(PowerLevel::kHighPower,
+            fake_nearby_connections_manager_->GetAdvertisingPowerLevel());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       BackgroundRegisterReceiveSurfaceIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  prefs_.SetInteger(prefs::kNearbySharingBackgroundVisibilityName,
+                    static_cast<int>(Visibility::kSelectedContacts));
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kBackground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_EQ(PowerLevel::kLowPower,
+            fake_nearby_connections_manager_->GetAdvertisingPowerLevel());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       RegisterReceiveSurfaceTwiceSameCallbackKeepAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+
+  NearbySharingService::StatusCodes result2 = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result2, NearbySharingService::StatusCodes::kError);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       RegisterReceiveSurfaceTwiceKeepAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+
+  FakeTransferUpdateCallback callback2;
+  NearbySharingService::StatusCodes result2 = service_->RegisterReceiveSurface(
+      &callback2, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result2, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       ScreenLockedRegisterReceiveSurfaceNotAdvertising) {
+  ui::ScopedSetIdleState locked(ui::IDLE_STATE_LOCKED);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsShutdown());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       DataUsageChangedRegisterReceiveSurfaceRestartsAdvertising) {
+  ui::ScopedSetIdleState locked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+
+  prefs_.SetInteger(prefs::kNearbySharingDataUsageName,
+                    static_cast<int>(DataUsage::kOffline));
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_EQ(DataUsage::kOffline,
+            fake_nearby_connections_manager_->GetAdvertisingDataUsage());
+
+  prefs_.SetInteger(prefs::kNearbySharingDataUsageName,
+                    static_cast<int>(DataUsage::kOnline));
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_EQ(DataUsage::kOnline,
+            fake_nearby_connections_manager_->GetAdvertisingDataUsage());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       NoNetworkRegisterReceiveSurfaceIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  // Succeeds since bluetooth is present.
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       NoBluetoothNoNetworkRegisterReceiveSurfaceNotAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  is_bluetooth_present_ = false;
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsShutdown());
+}
+
+TEST_F(NearbySharingServiceImplTest, WifiRegisterReceiveSurfaceIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       EthernetRegisterReceiveSurfaceIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_ETHERNET);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       ThreeGRegisterReceiveSurfaceIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_3G);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  // Since bluetooth is on, connection still succeeds.
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       NoBluetoothWifiReceiveSurfaceIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  is_bluetooth_present_ = false;
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       NoBluetoothEthernetReceiveSurfaceIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  is_bluetooth_present_ = false;
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_ETHERNET);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       NoBluetoothThreeGReceiveSurfaceNotAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  is_bluetooth_present_ = false;
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_3G);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsShutdown());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       DisableFeatureReceiveSurfaceNotAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  prefs_.SetBoolean(prefs::kNearbySharingEnabledPrefName, false);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsShutdown());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       DisableFeatureReceiveSurfaceStopsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+
+  prefs_.SetBoolean(prefs::kNearbySharingEnabledPrefName, false);
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsShutdown());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       ForegroundReceiveSurfaceNoOneVisibilityIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  prefs_.SetInteger(prefs::kNearbySharingBackgroundVisibilityName,
+                    static_cast<int>(Visibility::kNoOne));
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       BackgroundReceiveSurfaceNoOneVisibilityNotAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  prefs_.SetInteger(prefs::kNearbySharingBackgroundVisibilityName,
+                    static_cast<int>(Visibility::kNoOne));
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kBackground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsShutdown());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       BackgroundReceiveSurfaceVisibilityToNoOneStopsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  prefs_.SetInteger(prefs::kNearbySharingBackgroundVisibilityName,
+                    static_cast<int>(Visibility::kSelectedContacts));
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kBackground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+
+  prefs_.SetInteger(prefs::kNearbySharingBackgroundVisibilityName,
+                    static_cast<int>(Visibility::kNoOne));
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsShutdown());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       BackgroundReceiveSurfaceVisibilityToSelectedStartsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  prefs_.SetInteger(prefs::kNearbySharingBackgroundVisibilityName,
+                    static_cast<int>(Visibility::kNoOne));
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kBackground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsShutdown());
+
+  prefs_.SetInteger(prefs::kNearbySharingBackgroundVisibilityName,
+                    static_cast<int>(Visibility::kSelectedContacts));
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       ForegroundReceiveSurfaceSelectedContactsVisibilityIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  prefs_.SetInteger(prefs::kNearbySharingBackgroundVisibilityName,
+                    static_cast<int>(Visibility::kSelectedContacts));
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       BackgroundReceiveSurfaceSelectedContactsVisibilityIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  prefs_.SetInteger(prefs::kNearbySharingBackgroundVisibilityName,
+                    static_cast<int>(Visibility::kSelectedContacts));
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kBackground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       ForegroundReceiveSurfaceAllContactsVisibilityIsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  prefs_.SetInteger(prefs::kNearbySharingBackgroundVisibilityName,
+                    static_cast<int>(Visibility::kAllContacts));
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       BackgroundReceiveSurfaceAllContactsVisibilityNotAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  prefs_.SetInteger(prefs::kNearbySharingBackgroundVisibilityName,
+                    static_cast<int>(Visibility::kAllContacts));
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kBackground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest, UnregisterReceiveSurfaceStopsAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+
+  NearbySharingService::StatusCodes result2 =
+      service_->UnregisterReceiveSurface(&callback);
+  EXPECT_EQ(result2, NearbySharingService::StatusCodes::kOk);
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsAdvertising());
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsShutdown());
+}
+
+TEST_F(NearbySharingServiceImplTest,
+       UnregisterReceiveSurfaceDifferentCallbackKeepAdvertising) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result = service_->RegisterReceiveSurface(
+      &callback, NearbySharingService::ReceiveSurfaceState::kForeground);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kOk);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+
+  FakeTransferUpdateCallback callback2;
+  NearbySharingService::StatusCodes result2 =
+      service_->UnregisterReceiveSurface(&callback2);
+  EXPECT_EQ(result2, NearbySharingService::StatusCodes::kError);
+  EXPECT_TRUE(fake_nearby_connections_manager_->IsAdvertising());
+}
+
+TEST_F(NearbySharingServiceImplTest, UnregisterReceiveSurfaceNeverRegistered) {
+  ui::ScopedSetIdleState unlocked(ui::IDLE_STATE_IDLE);
+  SetConnectionType(net::NetworkChangeNotifier::CONNECTION_WIFI);
+  FakeTransferUpdateCallback callback;
+  NearbySharingService::StatusCodes result =
+      service_->UnregisterReceiveSurface(&callback);
+  EXPECT_EQ(result, NearbySharingService::StatusCodes::kError);
+  EXPECT_FALSE(fake_nearby_connections_manager_->IsAdvertising());
+}
diff --git a/chrome/browser/nearby_sharing/share_target.cc b/chrome/browser/nearby_sharing/share_target.cc
index 9c9da5047659..f8a870bccbac 100644
--- a/chrome/browser/nearby_sharing/share_target.cc
+++ b/chrome/browser/nearby_sharing/share_target.cc
@@ -4,6 +4,8 @@
 
 #include "chrome/browser/nearby_sharing/share_target.h"
 
+#include <utility>
+
 #include "base/atomic_sequence_num.h"
 
 namespace {
@@ -32,3 +34,5 @@ ShareTarget::ShareTarget(std::string device_name,
       is_known_(is_known) {}
 
 ShareTarget::~ShareTarget() = default;
+ShareTarget::ShareTarget(const ShareTarget&) = default;
+ShareTarget& ShareTarget::operator=(const ShareTarget&) = default;
diff --git a/chrome/browser/nearby_sharing/share_target.h b/chrome/browser/nearby_sharing/share_target.h
index 5f1b37309709..8df29a581ed1 100644
--- a/chrome/browser/nearby_sharing/share_target.h
+++ b/chrome/browser/nearby_sharing/share_target.h
@@ -27,6 +27,8 @@ class ShareTarget {
               base::Optional<std::string> full_name,
               bool is_known);
   ~ShareTarget();
+  ShareTarget(const ShareTarget&);
+  ShareTarget& operator=(const ShareTarget&);
 
   int id() { return id_; }
   const std::string& device_name() { return device_name_; }
diff --git a/chrome/browser/nearby_sharing/text_attachment.cc b/chrome/browser/nearby_sharing/text_attachment.cc
index f7406bd6623b..ab210fab9747 100644
--- a/chrome/browser/nearby_sharing/text_attachment.cc
+++ b/chrome/browser/nearby_sharing/text_attachment.cc
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include <utility>
+
 #include "chrome/browser/nearby_sharing/text_attachment.h"
 
 TextAttachment::TextAttachment(std::string text_body, Type type, int64_t size)
@@ -9,6 +11,10 @@ TextAttachment::TextAttachment(std::string text_body, Type type, int64_t size)
 
 TextAttachment::~TextAttachment() = default;
 
+TextAttachment::TextAttachment(const TextAttachment&) = default;
+
+TextAttachment& TextAttachment::operator=(const TextAttachment&) = default;
+
 int64_t TextAttachment::size() const {
   return size_;
 }
diff --git a/chrome/browser/nearby_sharing/text_attachment.h b/chrome/browser/nearby_sharing/text_attachment.h
index e4fcce86400e..e9863ce69717 100644
--- a/chrome/browser/nearby_sharing/text_attachment.h
+++ b/chrome/browser/nearby_sharing/text_attachment.h
@@ -27,6 +27,8 @@ class TextAttachment : public Attachment {
 
   TextAttachment(std::string text_body, Type type, int64_t size);
   ~TextAttachment() override;
+  TextAttachment(const TextAttachment&);
+  TextAttachment& operator=(const TextAttachment&);
 
   // Attachment:
   int64_t size() const override;
diff --git a/chrome/browser/nearby_sharing/transfer_metadata.cc b/chrome/browser/nearby_sharing/transfer_metadata.cc
index 7e2f4028fd69..2eb708a93762 100644
--- a/chrome/browser/nearby_sharing/transfer_metadata.cc
+++ b/chrome/browser/nearby_sharing/transfer_metadata.cc
@@ -2,6 +2,8 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include <utility>
+
 #include "chrome/browser/nearby_sharing/transfer_metadata.h"
 
 TransferMetadata::TransferMetadata(Status status,
@@ -16,3 +18,8 @@ TransferMetadata::TransferMetadata(Status status,
       is_final_status_(is_final_status) {}
 
 TransferMetadata::~TransferMetadata() = default;
+
+TransferMetadata::TransferMetadata(const TransferMetadata&) = default;
+
+TransferMetadata& TransferMetadata::operator=(const TransferMetadata&) =
+    default;
diff --git a/chrome/browser/nearby_sharing/transfer_metadata.h b/chrome/browser/nearby_sharing/transfer_metadata.h
index e13f3ae4c413..6b82fba803de 100644
--- a/chrome/browser/nearby_sharing/transfer_metadata.h
+++ b/chrome/browser/nearby_sharing/transfer_metadata.h
@@ -40,6 +40,8 @@ class TransferMetadata {
                    bool is_original,
                    bool is_final_status);
   ~TransferMetadata();
+  TransferMetadata(const TransferMetadata&);
+  TransferMetadata& operator=(const TransferMetadata&);
 
   Status status() { return status_; }
   float progress() { return progress_; }
diff --git a/chrome/browser/nearby_sharing/transfer_update_callback.h b/chrome/browser/nearby_sharing/transfer_update_callback.h
index be8a64102c91..3d582bd50d62 100644
--- a/chrome/browser/nearby_sharing/transfer_update_callback.h
+++ b/chrome/browser/nearby_sharing/transfer_update_callback.h
@@ -12,8 +12,8 @@
 // Reports the transfer status for an ongoing transfer with a |ShareTarget|.
 class TransferUpdateCallback : public base::CheckedObserver {
  public:
-  virtual void OnTransferUpdate(ShareTarget shareTarget,
-                                TransferMetadata transferMetadata) = 0;
+  virtual void OnTransferUpdate(const ShareTarget& shareTarget,
+                                const TransferMetadata& transferMetadata) = 0;
 };
 
 #endif  // CHROME_BROWSER_NEARBY_SHARING_TRANSFER_UPDATE_CALLBACK_H_
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index 23dbec40c39e..b33a418e2ad6 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -4366,6 +4366,7 @@ test("unit_tests") {
       "//components/sync:test_support",
       "//services/metrics/public/cpp:ukm_builders",
       "//third_party/libaddressinput",
+      "//ui/base/idle:test_support",
       "//ui/native_theme:test_support",
     ]
     if (is_win) {
-- 
2.26.2

